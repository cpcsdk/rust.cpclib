#[cfg(test)]
mod tests {

    fn test_single_dsk(dsk: &cpclib::disc::edsk::ExtendedDsk) {
        let track = dsk
            .get_track_information(cpclib::disc::edsk::Head::HeadA, 0)
            .unwrap();
        assert_eq!(*track.number_of_sectors(), 9);

        for (sector_idx, sum) in &[
            (0xc1, 21413),
            (0xc6, 60263),
            (0xc2, 22014),
            (0xc7, 49447),
            (0xc3, 85780),
        ] {
            let sector = track.sector(*sector_idx).unwrap();
            let values = sector
                .values()
                .iter()
                .map(|&v| format!("{:x}", v))
                .collect::<Vec<_>>();
            println!("0x{:x} => {:?}", sector_idx, values);
            assert_eq!(values.len(), 512);
            assert_eq!(sector.data_sum(), *sum);
        }

        assert_eq!(track.data_sum(), 484121);
        assert_eq!(
            dsk.get_track_information(cpclib::disc::edsk::Head::HeadA, 41)
                .unwrap()
                .data_sum(),
            329484
        );

        // Check catalgo access

        assert!(dsk.sector(0, 0, 0xc1).is_some());
        assert!(dsk.sector(0, 0, 0xc2).is_some());
        assert!(dsk.sector(0, 0, 0xc3).is_some());
        assert!(dsk.sector(0, 0, 0xc4).is_some());

        assert!(dsk
            .sectors_bytes(
                0,    // track
                0xc1, // sector
                4,    //nb sector
                0.into()
            )
            .is_some());

        assert!(dsk
            .sectors_bytes(
                0,    // track
                0xc1, // sector
                4,    //nb sector
                1.into()
            )
            .is_none());

        assert!(dsk
            .sectors_bytes(
                0,    // track
                0xc1, // sector
                4,    //nb sector
                2.into()
            )
            .is_none());
    }

    #[test]
    fn open_singel_head_edsk() {
        let dsk = cpclib::disc::edsk::ExtendedDsk::open("./tests/dsk/pirate.dsk").unwrap();
        test_single_dsk(&dsk);

        let tmp_file = "/tmp/tmp.dsk";
        dsk.save(tmp_file);
        let dsk = cpclib::disc::edsk::ExtendedDsk::open(tmp_file).unwrap();
        test_single_dsk(&dsk);
    }

    fn test_double_head_bf_edsk(dsk: &cpclib::disc::edsk::ExtendedDsk) {
        assert!(dsk.is_double_head());
        assert_eq!(dsk.data_sum(cpclib::disc::edsk::Head::HeadA), 66709468);

        assert_eq!(dsk.data_sum(cpclib::disc::edsk::Head::HeadB), 54340792);
    }

    #[test]
    fn open_double_head_edsk() {
        let dsk = cpclib::disc::edsk::ExtendedDsk::open("./tests/dsk/bf2heads.dsk").unwrap();
        test_double_head_bf_edsk(&dsk);

        let tmp_file = "/tmp/tmp.dsk";
        dsk.save(tmp_file);
        let dsk = cpclib::disc::edsk::ExtendedDsk::open(tmp_file).unwrap();
        test_double_head_bf_edsk(&dsk);
    }

    #[test]
    fn save_edsk() {
        let tmp_file = "/tmp/tmp.dsk";
        let dsk1 = cpclib::disc::edsk::ExtendedDsk::open("tests/dsk/pirate.dsk").unwrap();
        dsk1.save(tmp_file);
        let _ds2 = cpclib::disc::edsk::ExtendedDsk::open(tmp_file).unwrap();
    }

    #[test]
    fn sector_size() {
        use cpclib::disc::edsk::convert_fdc_sector_size_to_real_sector_size;
        use cpclib::disc::edsk::convert_real_sector_size_to_fdc_sector_size;

        for real_human_size in [256, 512, 1024, 2048].iter() {
            let computed_fdc_size = convert_real_sector_size_to_fdc_sector_size(*real_human_size);
            let computed_human_size =
                convert_fdc_sector_size_to_real_sector_size(computed_fdc_size);

            assert_eq!(*real_human_size, computed_human_size);
        }
    }


    #[test]
    fn test_harley() {
        use itertools::Itertools;

        let dsk = cpclib::disc::edsk::ExtendedDsk::open("tests/dsk/harley.dsk").unwrap();

        let tracks_content = [
673035,
398812,
394382,
391058,
392024,
400595,
382743,
642349,
1055232,
1055232,
1055232,
1055232,
1055232,
1055232,
1055232,
1055232,
1055232,
1055232,
1055232,
1055232,
1055232,
1055232,
1055232,
1055232,
1055232,
1055232,
1055232,
1055232,
1055232,
1055232,
1055232,
1055232,
1055232,
1055232,
1055232,
1055232,
1055232,
1055232,
1055232,
1055232,
1055232,
1055232];

        for (idx, value) in tracks_content.iter().enumerate() {
            assert_eq!(
                dsk.tracks_bytes(cpclib::disc::edsk::Head::HeadA, idx as u8)
                        .unwrap()
                        .iter()
                        .map(|&v|v as usize)
                        .sum::<usize>(),
                *value
            );
        }
    


    let sectors_content = [
        0,0xC1,512,512,104636,
0,0xC6,512,512,63783,
0,0xC2,512,512,117248,
0,0xC7,512,512,52723,
0,0xC3,512,512,117248,
0,0xC8,512,512,18656,
0,0xC4,512,512,117248,
0,0xC9,512,512,39740,
0,0xC5,512,512,41753,
1,0xC1,512,512,61288,
1,0xC6,512,512,55203,
1,0xC2,512,512,54618,
1,0xC7,512,512,12729,
1,0xC3,512,512,11887,
1,0xC8,512,512,38235,
1,0xC4,512,512,41604,
1,0xC9,512,512,61835,
1,0xC5,512,512,61413,
2,0xC1,512,512,53164,
2,0xC6,512,512,12252,
2,0xC2,512,512,12422,
2,0xC7,512,512,42150,
2,0xC3,512,512,43795,
2,0xC8,512,512,60866,
2,0xC4,512,512,62111,
2,0xC9,512,512,53609,
2,0xC5,512,512,54013,
3,0xC1,512,512,13335,
3,0xC6,512,512,42845,
3,0xC2,512,512,44481,
3,0xC7,512,512,60737,
3,0xC3,512,512,61903,
3,0xC8,512,512,53384,
3,0xC4,512,512,53641,
3,0xC9,512,512,48237,
3,0xC5,512,512,12495,
4,0xC1,512,512,47844,
4,0xC6,512,512,55210,
4,0xC2,512,512,49398,
4,0xC7,512,512,32158,
4,0xC3,512,512,33983,
4,0xC8,512,512,33977,
4,0xC4,512,512,36215,
4,0xC9,512,512,49994,
4,0xC5,512,512,53245,
5,0xC1,512,512,53690,
5,0xC6,512,512,29653,
5,0xC2,512,512,32992,
5,0xC7,512,512,34133,
5,0xC3,512,512,34536,
5,0xC8,512,512,48383,
5,0xC4,512,512,52255,
5,0xC9,512,512,55470,
5,0xC5,512,512,59483,
6,0xC1,512,512,33246,
6,0xC6,512,512,32272,
6,0xC2,512,512,34518,
6,0xC7,512,512,46384,
6,0xC3,512,512,49958,
6,0xC8,512,512,58711,
6,0xC4,512,512,59494,
6,0xC9,512,512,35296,
6,0xC5,512,512,32864,
7,0xC1,512,512,33853,
7,0xC6,512,512,117248,
7,0xC2,512,512,50621,
7,0xC7,512,512,117248,
7,0xC3,512,512,55535,
7,0xC8,512,512,117248,
7,0xC4,512,512,33348,
7,0xC9,512,512,117248,
7,0xC5,512,512,0,
8,0xC1,512,512,117248,
8,0xC6,512,512,117248,
8,0xC2,512,512,117248,
8,0xC7,512,512,117248,
8,0xC3,512,512,117248,
8,0xC8,512,512,117248,
8,0xC4,512,512,117248,
8,0xC9,512,512,117248,
8,0xC5,512,512,117248,
9,0xC1,512,512,117248,
9,0xC6,512,512,117248,
9,0xC2,512,512,117248,
9,0xC7,512,512,117248,
9,0xC3,512,512,117248,
9,0xC8,512,512,117248,
9,0xC4,512,512,117248,
9,0xC9,512,512,117248,
9,0xC5,512,512,117248,
10,0xC1,512,512,117248,
10,0xC6,512,512,117248,
10,0xC2,512,512,117248,
10,0xC7,512,512,117248,
10,0xC3,512,512,117248,
10,0xC8,512,512,117248,
10,0xC4,512,512,117248,
10,0xC9,512,512,117248,
10,0xC5,512,512,117248,
11,0xC1,512,512,117248,
11,0xC6,512,512,117248,
11,0xC2,512,512,117248,
11,0xC7,512,512,117248,
11,0xC3,512,512,117248,
11,0xC8,512,512,117248,
11,0xC4,512,512,117248,
11,0xC9,512,512,117248,
11,0xC5,512,512,117248,
12,0xC1,512,512,117248,
12,0xC6,512,512,117248,
12,0xC2,512,512,117248,
12,0xC7,512,512,117248,
12,0xC3,512,512,117248,
12,0xC8,512,512,117248,
12,0xC4,512,512,117248,
12,0xC9,512,512,117248,
12,0xC5,512,512,117248,
13,0xC1,512,512,117248,
13,0xC6,512,512,117248,
13,0xC2,512,512,117248,
13,0xC7,512,512,117248,
13,0xC3,512,512,117248,
13,0xC8,512,512,117248,
13,0xC4,512,512,117248,
13,0xC9,512,512,117248,
13,0xC5,512,512,117248,
14,0xC1,512,512,117248,
14,0xC6,512,512,117248,
14,0xC2,512,512,117248,
14,0xC7,512,512,117248,
14,0xC3,512,512,117248,
14,0xC8,512,512,117248,
14,0xC4,512,512,117248,
14,0xC9,512,512,117248,
14,0xC5,512,512,117248,
15,0xC1,512,512,117248,
15,0xC6,512,512,117248,
15,0xC2,512,512,117248,
15,0xC7,512,512,117248,
15,0xC3,512,512,117248,
15,0xC8,512,512,117248,
15,0xC4,512,512,117248,
15,0xC9,512,512,117248,
15,0xC5,512,512,117248,
16,0xC1,512,512,117248,
16,0xC6,512,512,117248,
16,0xC2,512,512,117248,
16,0xC7,512,512,117248,
16,0xC3,512,512,117248,
16,0xC8,512,512,117248,
16,0xC4,512,512,117248,
16,0xC9,512,512,117248,
16,0xC5,512,512,117248,
17,0xC1,512,512,117248,
17,0xC6,512,512,117248,
17,0xC2,512,512,117248,
17,0xC7,512,512,117248,
17,0xC3,512,512,117248,
17,0xC8,512,512,117248,
17,0xC4,512,512,117248,
17,0xC9,512,512,117248,
17,0xC5,512,512,117248,
18,0xC1,512,512,117248,
18,0xC6,512,512,117248,
18,0xC2,512,512,117248,
18,0xC7,512,512,117248,
18,0xC3,512,512,117248,
18,0xC8,512,512,117248,
18,0xC4,512,512,117248,
18,0xC9,512,512,117248,
18,0xC5,512,512,117248,
19,0xC1,512,512,117248,
19,0xC6,512,512,117248,
19,0xC2,512,512,117248,
19,0xC7,512,512,117248,
19,0xC3,512,512,117248,
19,0xC8,512,512,117248,
19,0xC4,512,512,117248,
19,0xC9,512,512,117248,
19,0xC5,512,512,117248,
20,0xC1,512,512,117248,
20,0xC6,512,512,117248,
20,0xC2,512,512,117248,
20,0xC7,512,512,117248,
20,0xC3,512,512,117248,
20,0xC8,512,512,117248,
20,0xC4,512,512,117248,
20,0xC9,512,512,117248,
20,0xC5,512,512,117248,
21,0xC1,512,512,117248,
21,0xC6,512,512,117248,
21,0xC2,512,512,117248,
21,0xC7,512,512,117248,
21,0xC3,512,512,117248,
21,0xC8,512,512,117248,
21,0xC4,512,512,117248,
21,0xC9,512,512,117248,
21,0xC5,512,512,117248,
22,0xC1,512,512,117248,
22,0xC6,512,512,117248,
22,0xC2,512,512,117248,
22,0xC7,512,512,117248,
22,0xC3,512,512,117248,
22,0xC8,512,512,117248,
22,0xC4,512,512,117248,
22,0xC9,512,512,117248,
22,0xC5,512,512,117248,
23,0xC1,512,512,117248,
23,0xC6,512,512,117248,
23,0xC2,512,512,117248,
23,0xC7,512,512,117248,
23,0xC3,512,512,117248,
23,0xC8,512,512,117248,
23,0xC4,512,512,117248,
23,0xC9,512,512,117248,
23,0xC5,512,512,117248,
24,0xC1,512,512,117248,
24,0xC6,512,512,117248,
24,0xC2,512,512,117248,
24,0xC7,512,512,117248,
24,0xC3,512,512,117248,
24,0xC8,512,512,117248,
24,0xC4,512,512,117248,
24,0xC9,512,512,117248,
24,0xC5,512,512,117248,
25,0xC1,512,512,117248,
25,0xC6,512,512,117248,
25,0xC2,512,512,117248,
25,0xC7,512,512,117248,
25,0xC3,512,512,117248,
25,0xC8,512,512,117248,
25,0xC4,512,512,117248,
25,0xC9,512,512,117248,
25,0xC5,512,512,117248,
26,0xC1,512,512,117248,
26,0xC6,512,512,117248,
26,0xC2,512,512,117248,
26,0xC7,512,512,117248,
26,0xC3,512,512,117248,
26,0xC8,512,512,117248,
26,0xC4,512,512,117248,
26,0xC9,512,512,117248,
26,0xC5,512,512,117248,
27,0xC1,512,512,117248,
27,0xC6,512,512,117248,
27,0xC2,512,512,117248,
27,0xC7,512,512,117248,
27,0xC3,512,512,117248,
27,0xC8,512,512,117248,
27,0xC4,512,512,117248,
27,0xC9,512,512,117248,
27,0xC5,512,512,117248,
28,0xC1,512,512,117248,
28,0xC6,512,512,117248,
28,0xC2,512,512,117248,
28,0xC7,512,512,117248,
28,0xC3,512,512,117248,
28,0xC8,512,512,117248,
28,0xC4,512,512,117248,
28,0xC9,512,512,117248,
28,0xC5,512,512,117248,
29,0xC1,512,512,117248,
29,0xC6,512,512,117248,
29,0xC2,512,512,117248,
29,0xC7,512,512,117248,
29,0xC3,512,512,117248,
29,0xC8,512,512,117248,
29,0xC4,512,512,117248,
29,0xC9,512,512,117248,
29,0xC5,512,512,117248,
30,0xC1,512,512,117248,
30,0xC6,512,512,117248,
30,0xC2,512,512,117248,
30,0xC7,512,512,117248,
30,0xC3,512,512,117248,
30,0xC8,512,512,117248,
30,0xC4,512,512,117248,
30,0xC9,512,512,117248,
30,0xC5,512,512,117248,
31,0xC1,512,512,117248,
31,0xC6,512,512,117248,
31,0xC2,512,512,117248,
31,0xC7,512,512,117248,
31,0xC3,512,512,117248,
31,0xC8,512,512,117248,
31,0xC4,512,512,117248,
31,0xC9,512,512,117248,
31,0xC5,512,512,117248,
32,0xC1,512,512,117248,
32,0xC6,512,512,117248,
32,0xC2,512,512,117248,
32,0xC7,512,512,117248,
32,0xC3,512,512,117248,
32,0xC8,512,512,117248,
32,0xC4,512,512,117248,
32,0xC9,512,512,117248,
32,0xC5,512,512,117248,
33,0xC1,512,512,117248,
33,0xC6,512,512,117248,
33,0xC2,512,512,117248,
33,0xC7,512,512,117248,
33,0xC3,512,512,117248,
33,0xC8,512,512,117248,
33,0xC4,512,512,117248,
33,0xC9,512,512,117248,
33,0xC5,512,512,117248,
34,0xC1,512,512,117248,
34,0xC6,512,512,117248,
34,0xC2,512,512,117248,
34,0xC7,512,512,117248,
34,0xC3,512,512,117248,
34,0xC8,512,512,117248,
34,0xC4,512,512,117248,
34,0xC9,512,512,117248,
34,0xC5,512,512,117248,
35,0xC1,512,512,117248,
35,0xC6,512,512,117248,
35,0xC2,512,512,117248,
35,0xC7,512,512,117248,
35,0xC3,512,512,117248,
35,0xC8,512,512,117248,
35,0xC4,512,512,117248,
35,0xC9,512,512,117248,
35,0xC5,512,512,117248,
36,0xC1,512,512,117248,
36,0xC6,512,512,117248,
36,0xC2,512,512,117248,
36,0xC7,512,512,117248,
36,0xC3,512,512,117248,
36,0xC8,512,512,117248,
36,0xC4,512,512,117248,
36,0xC9,512,512,117248,
36,0xC5,512,512,117248,
37,0xC1,512,512,117248,
37,0xC6,512,512,117248,
37,0xC2,512,512,117248,
37,0xC7,512,512,117248,
37,0xC3,512,512,117248,
37,0xC8,512,512,117248,
37,0xC4,512,512,117248,
37,0xC9,512,512,117248,
37,0xC5,512,512,117248,
38,0xC1,512,512,117248,
38,0xC6,512,512,117248,
38,0xC2,512,512,117248,
38,0xC7,512,512,117248,
38,0xC3,512,512,117248,
38,0xC8,512,512,117248,
38,0xC4,512,512,117248,
38,0xC9,512,512,117248,
38,0xC5,512,512,117248,
39,0xC1,512,512,117248,
39,0xC6,512,512,117248,
39,0xC2,512,512,117248,
39,0xC7,512,512,117248,
39,0xC3,512,512,117248,
39,0xC8,512,512,117248,
39,0xC4,512,512,117248,
39,0xC9,512,512,117248,
39,0xC5,512,512,117248,
40,0xC1,512,512,117248,
40,0xC6,512,512,117248,
40,0xC2,512,512,117248,
40,0xC7,512,512,117248,
40,0xC3,512,512,117248,
40,0xC8,512,512,117248,
40,0xC4,512,512,117248,
40,0xC9,512,512,117248,
40,0xC5,512,512,117248,
41,0xC1,512,512,117248,
41,0xC6,512,512,117248,
41,0xC2,512,512,117248,
41,0xC7,512,512,117248,
41,0xC3,512,512,117248,
41,0xC8,512,512,117248,
41,0xC4,512,512,117248,
41,0xC9,512,512,117248,
41,0xC5,512,512,117248
        ];

    for mut chunk in &sectors_content.into_iter().chunks(5) {

        let track = *chunk.next().unwrap() as u8;
        let sector = *chunk.next().unwrap() as u8;
        let size = *chunk.next().unwrap() as usize;
        let real_size = *chunk.next().unwrap() as usize;
        let value = *chunk.next().unwrap() as usize;

        assert_eq!(
            dsk.sectors_bytes(
                cpclib::disc::edsk::Head::HeadA, 
                track,
                sector,
                1)
                    .unwrap()
                    .iter()
                    .map(|&v|v as usize)
                    .sum::<usize>(),
            value
        );
    }

    // TODO find a way to count the sectors iused
    /*
    assert_eq!(
        dsk.sectors_used().count(),
        65
    );
    */

    use cpclib::disc::amsdos::*;
    let amsdos = AmsdosManager::new_from_disc(dsk, cpclib::disc::edsk::Head::HeadA);
    let entries = dbg!(amsdos.catalog().to_amsdos_catalog());
    
    assert_eq!(entries.len(), 1);

    let entry = dbg!(&entries[0]);
    let filename = entry.file_name();

    assert_eq!(
        filename.name(),
        "-CED-"
    );

    assert_eq!(
        filename.extension(),
        "EXE"
    );

    assert_eq!(
        filename.user(),
        0
    );

    assert!(!entry.read_only());
    assert!(!entry.system());

    assert_eq!(
        entry.size(),
        32
    );
}
}
