{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>cpclib is a rust library that aims at helping to develop Amstrad CPC demos.  Maybe it could be usefull for other z80 platform or even games.  Most functionalities are still in beta state; I have only implemented the subset I need for my current Amstrad CPC demo projects.  Several tools are provided in addition to library.</p> <p>There are more are less able to do:</p> <pre><code>- assemble z80 source code.\n   - Mainly interesting for auto-generated code, not for handcrafted one.\n   - Not all opcodes are managed.\n   - Functionalities not available in other assemblers:\n      -  Injection of basic source code (WIP)\n       - Function able to provided the opcode value of an instruction or its standard duration\n- manipulate .sna files\n   - Minimal support of chunks at the moment\n- convert images to CPC format. Usable for standard resolutions/modes\n- manipulate DSK (trying to mimick iDSK or dskmanager). Able to format and add files\n- communicate with cpcwifi board\n  -  Replication of xfer utility.\n  -  Only reset and run file have been coded at the moment\n  -  In opposite to the original xfer tool, cpclib one is able to start snapshots V3 (there are simply converted as snapshot v2 on the fly)\n- create basic tokens from basic source (WIP)\n</code></pre>"},{"location":"basm/","title":"BASM documentation - WIP","text":""},{"location":"basm/#basm","title":"BASM","text":"<p>Benediction ASsembler (<code>BASM</code> in short) is a modern Z80 assembler. He has taken its inspiration from various Z80 assembler (Maxam/Winape, sjasmplus, rasm, vasm, BRASS, glass, zasm) as well as assemblers from other platforms (asm11, sarcasm). It is tailored for Amstrad CPC demomaking and  has been successfully used to develop the Amstrad CPC demo Can Robots Take Control?. It has been still improved since and will serve for futur productions too.</p> <p>The documentation is quite minimal at the moment, but included example code should be still valid and assembled propetly. The user base being quite small, lots of bugs can remain. Do note hesitate to fill issues https://github.com/cpcsdk/rust.cpclib/issues or propose fixes.</p>"},{"location":"basm/#features-of-interest","title":"Features of Interest","text":"<ul> <li>Possibility to assemble fake instructions (e.g. <code>ld hl, de</code>).</li> <li>Possibility to use standard directives (e.g. <code>incbin 'file.asm</code>).</li> <li>Rare directives and functions (e.g. <code>ld a, opcode(xor a)</code>).</li> <li>Macros definition and usage (e.g. <code>MY_MACRO_WITH_TWO_ARGS 1, \"string\"</code>).</li> <li>Function definition and usage (e.g. <code>db 5, my_function(3)</code>).</li> <li>Expressions able to handle numbers, strings, lists, matrices.</li> <li>Handling of Amstrad CPC snapshots.</li> <li>Possibility to execute directly the assembled project in the Amstrad CPC thanks to the M4/CPC WIFI card.</li> <li>Multi-pass (in fact, <code>BASM</code> uses as many passes as needed).</li> <li>Multiplatform (mainly tested on Linux and Windows).</li> <li>Embedding of various ASM source files inside <code>BASM</code> that can be used by the users.</li> <li>Possibility to write LOCOMOTIVE BASIC for easily writting Amstrad CPC bootstrap loaders.</li> </ul>"},{"location":"basm/#hello-world","title":"Hello World","text":"<p>An hello world representative of the functionalities of <code>BASM</code> would be: <pre><code>    snainit \"../cpclib-sna/src/cpc6128.sna\" ; should be uneeded by properly specifying sna properties\n\n    org 0x4000\n    run $\n\n\n\n    ld hl, text_content\nloop\n        ld a, (hl)\n        or a\n        jp z, finished\n\n        call TXT_OUTPUT\n        inc hl\n        jp loop\n\nfinished\n    jp $\n\ntext_content\n    db \"Hello, world!\", 0\n    include \"inner://firmware/txtvdu.asm\"\n</code></pre></p>"},{"location":"basm/#download-last-version","title":"Download last version","text":"<p>Prefer to compile yourself <code>basm</code>. But you can still download latest versions here:</p> <ul> <li>Linux </li> <li>Windows </li> </ul> <p>Failure</p> <p>Continuous delivery system for Linux is broken. The executables are outdated of few years...</p>"},{"location":"basm/#differences-with-rasm","title":"Differences with RASM","text":"<ul> <li>slower on the parsing side</li> <li>more buggy because not enough tested ;)</li> <li><code>MODULE</code> directive must be closed by <code>ENDMODULE</code></li> <li><code>REPEAT</code> counter is not accessible by using the variable <code>counter</code> but <code>{counter}</code> as in a <code>MACRO</code></li> <li>It is possible to name a <code>MACRO</code> using the label before the <code>MACRO</code> directive</li> <li>More data types (list, matrix, int, float, boolean)</li> <li>As <code>basm</code> can use an unlimited number of pass (warning there is not infinite loop check ATM), it can assemble  code that would not be assembled with <code>rasm</code> because labels have to be known at this moment</li> <li>Weak support of <code>DSK``, no support of</code>TAPE<code>and `CPR</code>. <code>HFE</code> is usable on Linux with the appropriate compilation option. <code>AMSDOS</code> support is buggy <code>ATM</code></li> <li><code>SNA</code> should be ok</li> <li>Possibility to add some <code>BASIC</code> tokens to create loaders that do not clear the screen when launched</li> </ul>"},{"location":"basm/cmdline/","title":"Command line arguments","text":"<p>Here is the help provided by <code>basm</code>.</p> <pre><code>Profile debug compiled: Sun, 20 Aug 2023 20:55:05 +0000\n\nBenediction ASM -- z80 assembler that mainly targets Amstrad CPC\n\nUsage: basm.exe [OPTIONS] [INPUT]\n\nArguments:\n  [INPUT]  Input file to read.\n\nOptions:\n      --inline &lt;INLINE&gt;                Z80 code is provided inline\n  -o, --output &lt;OUTPUT&gt;                Filename of the output.\n      --db                             Write a db list on screen (usefull to get the value of an opcode)\n      --lst &lt;LISTING_OUTPUT&gt;           Filename of the listing output.\n      --sym &lt;SYMBOLS_OUTPUT&gt;           Filename of the output symbols file.\n      --sym_kind &lt;SYMBOLS_KIND&gt;        Format of the output symbols file [default: basm] [possible values: winape, basm]\n      --basic                          Request a Basic header (the very first instruction has to be the LOCOMOTIVE directive).\n      --binary                         Request a binary header\n      --snapshot                       Generate a snapshot\n  -i, --case-insensitive               Configure the assembler to be case insensitive.\n  -d, --directives-prefixed-by-dot     Expect directives to by prefixed with a dot\n  -I, --include &lt;INCLUDE_DIRECTORIES&gt;  Provide additional directories used to search files\n  -D, --define &lt;DEFINE_SYMBOL&gt;         Provide a symbol with its value (default set to 1)\n      --m4 &lt;TO_M4&gt;                     Provide the IP address of the M4\n  -l &lt;LOAD_SYMBOLS&gt;                    Load symbols from the given file\n      --Werror                         Warning are considered to be errors\n      --progress                       Show a progress bar.\n      --list-embedded                  List the embedded files\n      --view-embedded &lt;VIEW_EMBEDDED&gt;  Display one specific embedded file [possible values: inner://crtc.asm, inner://deexo.asm, inner://dzx0_fast.asm, inner://dzx0_standard.asm, inner://firmware/amsdos.asm, inner://firmware/casmng.asm, inner://firmware/gfxvdu.asm, inner://firmware/highkern.asm, inner://firmware/indirect.asm, inner://firmware/kernel.asm, inner://firmware/keymng.asm, inner://firmware/lowkern.asm, inner://firmware/machine.asm, inner://firmware/math6128.asm, inner://firmware/mathnot464.asm, inner://firmware/mathnot6xx.asm, inner://firmware/not464.asm, inner://firmware/scrpack.asm, inner://firmware/sound.asm, inner://firmware/txtvdu.asm, inner://ga.asm, inner://lz48decrunch.asm, inner://lz49decrunch.asm, inner://lz4_docent.asm, inner://opcodes_first_byte.asm, inner://pixels-routs.asm, inner://unaplib.asm, inner://unaplib_fast.asm]\n  -h, --help                           Print help\n  -V, --version                        Print version\n\nStill a Work In Progress assembler\n</code></pre>"},{"location":"basm/directives/","title":"Directives","text":"<p>Failure</p> <p>Not all directives have their synopsis, explanation, and examples</p>"},{"location":"basm/directives/#listing-related","title":"Listing related","text":""},{"location":"basm/directives/#list-nolist","title":"LIST, NOLIST","text":"<p>Example:</p> <pre><code>    org 0\n    LIST\n\n    ld a, 0\n    ; visible in the listing output\n\n    NOLIST\n\n    ld a, 1\n    ; Not visible in the listing ouput\n</code></pre>"},{"location":"basm/directives/#memory-related","title":"Memory related","text":""},{"location":"basm/directives/#align","title":"ALIGN","text":"<p>Example:</p> <pre><code>    org 0x1234\n\n        align 256\n        assert $ == 0x1300\n\n        align 256\n        assert $ == 0x1300\n\n        nop\n\n        align 128, 3\n        assert $ == 0x1300 + 128\n</code></pre>"},{"location":"basm/directives/#confined","title":"CONFINED","text":"<p>Confine a memory area of 256 bytes maximum in such a way that it is always possible to navigate in the data by only modifying the low byte address (i.e INC L always works).</p> <pre><code>CONFINED\n  LISTING\nENDCONFINED\n</code></pre> <pre><code>;;\n; Confined directive is inspired by confine from rasm.\n; I guess confined is more  ergonomic has it does not requires to manually specify the size of the confined area\n\n    org 0x0000\n\n    CONFINED\n        assert $ == 0\n        defs 128, 0xff\n    ENDCONFINED\n\n    CONFINED\n        assert $ == 256\n        defs 200, 0xff\n    ENDCONFINED\n\n    CONFINED\n        assert $ == 256 + 200\n        defs 20, 0xff\n    ENDCONFINED\n</code></pre>"},{"location":"basm/directives/#org","title":"ORG","text":""},{"location":"basm/directives/#limit","title":"LIMIT","text":"<p>On the code space ($), not physical space ($$)</p> <p>Example of code that assembles: <pre><code>    org 0x100\n\n    limit 0x102\n    print {hex}$ : db 1 ; written in 0x100\n    print {hex}$ : db 2 ; written in 0x101\n    print {hex}$ : db 3 ; written in 0x102\n    ;print {hex}$ : db 4 ; written in 0x103 =&gt; must fail\n</code></pre></p> <p>Example of code that fails: <pre><code>\n</code></pre></p>"},{"location":"basm/directives/#phase-dephase","title":"PHASE, DEPHASE","text":"<pre><code>; https://k1.spdns.de/Develop/Projects/zasm/Documentation/z71.htm\n    org 0x100\n\nlabel_100\n    nop\nlabel_101\n\n    assert $$ == 0x101\n    assert $ == 0x101\n\n    phase 0x200\n\n    assert $$ == 0x101\n    assert $ == 0x200\n\nlabel_200\n    nop\nlabel_201\n\n    dephase\nlabel_102\n\n    assert label_100 == 0x100\n    assert label_101 == 0x101\n    assert label_102 == 0x102\n    assert label_200 == 0x200\n    assert label_201 == 0x201\n</code></pre>"},{"location":"basm/directives/#protect","title":"PROTECT","text":"<p>Synopsis: <pre><code>PROTECT START, STOP\n</code></pre> Description: Mark the memory between START and STOP as protected against write. Assembler fails when writting there.</p> <p>On the code space ($), not physical space ($$)</p> <p>Example: <pre><code>    org 0x4000\n\n    protect 0x8000, 0xbfff\n\n    defb \"No memory issue\"\n</code></pre></p>"},{"location":"basm/directives/#range-section","title":"RANGE, SECTION","text":"<p>Description: RANGE allows to define named portion of the memory, while SECTION allows to chose the portion of interest.</p> <p>Example: <pre><code>; sarcasm inspiration https://www.ecstaticlyrics.com/electronics/Z80/sarcasm/\n\nrange $0080, $3FFF, code\nrange $4000, $7FFF, data\n\nsection code\n  ld hl, message_1\n  call print_message\n\nsection data\nmessage_1: db \"This is message #1.\", $00\n\nsection code\n  ld hl, message_2\n  call print_message\n\nsection data\nmessage_2: db \"This is message #2.\", $00\n\nsection code\n  print_message: \n    ld a, (hl)\n    or a\n    ret z\n    call 0xbb5a\n    inc hl\n    jr print_message\n\n    assert section_start(\"data\") ==  0x4000\n    assert section_length(\"data\") == 0x4000\n    assert section_used(\"data\") == 40\n</code></pre></p>"},{"location":"basm/directives/#bank","title":"BANK","text":"<p>Description:</p> <p>When used with no argument, a bank corresponds to a memory area outside of the snapshot. All things read&amp;write in memory are thus uncorrelated to the snapshot. Sections do not apply in a bank.</p> <p><code>BANK page</code> is similar to <code>WRITE DIRECT -1 -1 page</code></p> <p>Synopsis:</p> <pre><code>BANK [EXPRESSION]\n</code></pre> <p>Example: <pre><code>    ; Set up a unique value in various banks\n    BANK 0xc0\n    org 0x4000 + 0\n    db 0xc0\n\n    BANK 0xc4\n    org 0x4000 + 1\n    db 0xc4\n\n\n    BANK 0xc5\n    org 0x4000 + 2\n    db 0xc5\n\n    BANK 0xc6\n    org 0x4000 + 3\n    db 0xc6\n\n\n    BANK 0xc7\n    org 0x4000 + 4\n    db 0xc7\n\n\n    BANKSET 0\n    assert memory(0x4000 + 0) == 0xC0 \n\n    BANKSET 1\n    assert memory(0x4000 + 2) == 0xC5\n    assert memory(0x8000 + 3) == 0xC6\n    assert memory(0xC000 + 4) == 0xC7\n</code></pre></p>"},{"location":"basm/directives/#bankset","title":"BANKSET","text":"<p>Synopsis:</p> <pre><code>BANKSET EXPRESSION\n</code></pre> <p>Example: <pre><code>    BANKSET 0\n\n    org 0x0000\n    db 1,2,3,4\n\n    org 0x4000\n    db 5,6,7,8\n\n    org 0x8000\n    db 9,10,11,12\n\n    org 0xc000\n    db 13, 14, 15, 16\n\n\n    BANKSET 1\n    org 0x0000\n    db 10,20,30,40\n\n    org 0x4000\n    db 50,60,70,80\n\n    org 0x8000\n    db 90,100,110,120\n\n    org 0xc000\n    db 130, 140, 150, 160\n\n\n    BANKSET 0\n    assert memory(0x0000) == 1\n    assert memory(0x4000) == 5\n    assert memory(0x8000) == 9\n    assert memory(0xc000) == 13\n\n    save \"good_bankset_0_0.o\", 0x0000, 4\n    save \"good_bankset_0_1.o\", 0x4000, 4\n    save \"good_bankset_0_2.o\", 0x8000, 4\n    save \"good_bankset_0_3.o\", 0xc000, 4\n\n    BANKSET 1\n    assert memory(0x0000) == 10\n    assert memory(0x4000) == 50\n    assert memory(0x8000) == 90\n    assert memory(0xc000) == 130\n\n    save \"good_bankset_1_0.o\", 0x0000, 4\n    save \"good_bankset_1_1.o\", 0x4000, 4\n    save \"good_bankset_1_2.o\", 0x8000, 4\n    save \"good_bankset_1_3.o\", 0xc000, 4\n</code></pre></p>"},{"location":"basm/directives/#write-direct","title":"WRITE DIRECT","text":"<p>Description: WRITE DIRECT is a directive from Winape that we have not fully reproduced. It's two first arguments need to be -1.</p> <p>Example: <pre><code>    WRITE DIRECT -1, -1, 0xc0\n    org 0x4000+0\n    db 0xc0\n\n    WRITE DIRECT -1, -1,  0xc4\n    org 0x4000+1\n    db 0xc4\n\n\n    WRITE DIRECT -1, -1,  0xc5\n    org 0x4000+2\n    db 0xc5\n\n    WRITE DIRECT -1, -1,  0xc6\n    org 0x4000+3\n    db 0xc6\n\n\n    WRITE DIRECT -1, -1,  0xc7\n    org 0x4000+4\n    db 0xc7\n\n\n    BANKSET 0\n    assert memory(0x4000 + 0) == 0xC0 \n\n    BANKSET 1\n    assert memory(0x4000 + 2) == 0xC5\n    assert memory(0x8000 + 3) == 0xC6\n    assert memory(0xC000 + 4) == 0xC7\n</code></pre></p>"},{"location":"basm/directives/#labels-related","title":"Labels related","text":""},{"location":"basm/directives/#set","title":"=, SET","text":"<p>Description:</p> <p>Assign an expression to a label. Assignement can be repeated  several times.</p> <p>Synopsis: <pre><code>LABEL = EXPRESSION\n</code></pre></p> <p>Example: <pre><code>label = 1\nlabel =3\n.label=2\n\n    assert label == 3\n\n\nlabel = 5\n    assert label == 5\n\nlabel &lt;&lt;= 1\n    assert label == 10\n</code></pre></p>"},{"location":"basm/directives/#equ","title":"EQU","text":"<p>Description: Assign an expression to a label. Assignement cannot be repeated  several times.</p> <p>Synopsis: <pre><code>LABEL = EXPRESSION\n</code></pre></p> <p>Example: <pre><code>label = 1\nlabel =3\n.label=2\n\n    assert label == 3\n\n\nlabel = 5\n    assert label == 5\n\nlabel &lt;&lt;= 1\n    assert label == 10\n</code></pre></p>"},{"location":"basm/directives/#map","title":"MAP","text":"<p><code>MAP VALUE</code> define a map counter to <code>the required value.</code>#` is used to assign the value to a given label and increment it of the appropriate amount.</p> <p>Example: <pre><code>    ; extract stolen here https://github.com/GuillianSeed/MetalGear/blob/master/Variables.asm#L10\n            map #c000\n\nGameStatus:     # 1\nGameSubstatus:      # 1\nControlConfig:      # 1\n                                ; Bit6: 1=Enable music/Player control\nTickCounter:        # 1\nWaitCounter:        # 1\nTickInProgress:     # 1\nControlsTrigger:    # 1\n                                ; 5 = Fire2 / M,  4 = Fire / Space, 3 = Right, 2 = Left, 1 = Down, 0 = Up\nControlsHold:       # 1\n                                ; 5 = Fire2 / M,  4 = Fire / Space, 3 = Right, 2 = Left, 1 = Down, 0 = Up\nPause_1_F5_2:       # 1\nTutorialStatus:     # 1\nDemolHoldTime:      # 1\nUnusedVar1:     # 1\nDemoPlayId:     # 1\nDemoDataPointer:    # 2\n                                ; Pointer to presaved demo controls\nSprShuffleOffset:   # 1\n\n\n    assert GameStatus = 0xc000\n    assert GameSubstatus = (0xc000 + 1)\n    assert ControlConfig = (0xc000 + 1 + 1)\n    assert TickCounter = (0xc000 + 1 + 1+1)\n    assert DemolHoldTime = (0xc000 + 10)\n    assert SprShuffleOffset = (0xc000 + 15)\n</code></pre></p>"},{"location":"basm/directives/#setn-next","title":"SETN, NEXT","text":"<p><code>MAP</code> directive is probably easier to use</p> <p>Example: <pre><code> ; http://www.aspisys.com/asm11man.htm\n\n org 0x100\n\n\ndata set $\n    assert data == 0x100\n\ndata1 setn  data ; data1 could be modified\ndata2 next data, 2 ; data2 cannot be modified\ndata3 next data\n\n    assert data1 == 0x100\n    assert data2 == 0x101\n    assert data3 == 0x103\n    assert data == 0x104\n</code></pre></p>"},{"location":"basm/directives/#undef","title":"UNDEF","text":"<p>Example: <pre><code>my_label = 1\n\n    ifndef my_label\n        fail \"my_label must exist\"\n    endif\n\n    undef my_label\n\n    ifdef my_label\n        fail \"my_label must not exist\"\n    endif\n</code></pre></p>"},{"location":"basm/directives/#data-related","title":"Data related","text":""},{"location":"basm/directives/#byte-text-db-defb-dm-defm","title":"BYTE, TEXT, DB, DEFB, DM, DEFM","text":"<p>Example: <pre><code>    ; defb tests\n    org 0x200\n\n    defb 1, 2, 3, 4\n    defb \"hello\", ' ', \"world\"\n    defb $, $ ; should generate 2 different values\n    db \"Hello world\", 0\n</code></pre></p>"},{"location":"basm/directives/#word-dw-defw","title":"WORD, DW, DEFW","text":""},{"location":"basm/directives/#defs","title":"DEFS","text":"<p>Example: <pre><code>    org 0x100\n\n\n    defs 5\n    defs 5, 8, 4\n    defs 5, 8, 4, 1\n</code></pre></p>"},{"location":"basm/directives/#str","title":"STR","text":"<p>Description: STR encodes string in AMSDOS format (i.e., adds 0x80 to the last char) and stores its bytes in memory.</p> <p>Example: <pre><code>    org 0x1000\n    defb \"hell\"\n    defb 'o' + 0x80\n\n    org 0x2000\n    str \"hello\"\n\n    org 0x3000\n    db \"Next one will be more complex\"\n    db \"   \\\" et voila\"\n    db \" \\\" et voila\"\n    db \"\\\" et voila\"\n\n    assert memory(0x1000) == memory(0x2000)\n    assert memory(0x1001) == memory(0x2001)\n    assert memory(0x1002) == memory(0x2002)\n    assert memory(0x1003) == memory(0x2003)\n</code></pre></p>"},{"location":"basm/directives/#charset","title":"CHARSET","text":"<p>Example: <pre><code> org 0x100\n\n charset \"abcdefghijklmnopqrstuvwxyz\", 0\n charset \"AB\", 100\n db \"aA\"\n ASSERT memory(0x100) == 0x00\n ASSERT memory(0x101) == 100\n\n org 0x200\n charset\n db \"aA\"\n ASSERT memory(0x200) == 'a'\n ASSERT memory(0x201) == 'A' \n</code></pre></p>"},{"location":"basm/directives/#conditional-directives","title":"Conditional directives","text":""},{"location":"basm/directives/#if-ifnot","title":"IF, IFNOT","text":""},{"location":"basm/directives/#ifdef-ifndef","title":"IFDEF, IFNDEF","text":"<p>Check if a label as ALREADY been defined before reading this directive.</p> <p>Example: <pre><code>    org 0x1000\n\n    ifndef toto\n    assert toto == $\ntoto\n        assert pouet == 0x1002\n        dw pouet\n    endif\npouet\n</code></pre></p>"},{"location":"basm/directives/#ifused","title":"IFUSED","text":"<p>Example: <pre><code>    org 0x1000\n; 3 passes are needed there\n\n    ifused toto\ntoto\n        ret\n    endif\n\n    call toto\n\n; test\n</code></pre></p>"},{"location":"basm/directives/#nested-conditions","title":"Nested conditions","text":"<p>Conditions can be nested.</p> <p>Example: <pre><code>    org 0x100\n\n    if 0 == 1\n        fail \"not reachable\"\n    else ifdef toto\n        fail \"not reachable\"\n    else ifndef toto\n        print \"reached\"\n        db 1\n    else\n        fail \"not reachable\"\n    endif\n</code></pre></p>"},{"location":"basm/directives/#switch-endswitch","title":"SWITCH, ENDSWITCH","text":"<p>Example: <pre><code>    org 0x100\n\n    switch 3\n    ; one comment\n    case 1\n        db 1\n        break\n    case 3\n        db 3\n    ; another comment\n    case 4\n        db 4\n        break\n    case 5\n        db 5\n    default\n        db 6\n    endswitch\n\n\n\n        switch 5\n    case 1\n        db 1\n        break\n    case 3\n        db 3\n    case 4\n        db 4\n        break\n    case 5\n        db 5\n    default\n        db 6\n    endswitch\n</code></pre></p>"},{"location":"basm/directives/#code-duplication-directives","title":"Code duplication directives","text":""},{"location":"basm/directives/#for","title":"FOR","text":"<pre><code>FOR &lt;variable&gt; [, EXPRESSION]+\n  LISTING\nENDFOR|FEND\n</code></pre> <p>Example: <pre><code>    ; Takes inspiration from BRASS assembler\n\n    for count, 0, 10, 3\n        db {count}\n    endfor\n\n    for x, 0, 3\n        for y, 0, 3\n            db {x}*4 + {y}\n        fend\n    endfor\n</code></pre> Corresponds to <pre><code>        db 0\n        db 3\n        db 6\n        db 9\n\n        db 0*4 + 0\n        db 0*4 + 1\n        db 0*4 + 2\n        db 0*4 + 3\n\n        db 1*4 + 0\n        db 1*4 + 1\n        db 1*4 + 2\n        db 1*4 + 3\n\n        db 2*4 + 0\n        db 2*4 + 1\n        db 2*4 + 2\n        db 2*4 + 3\n\n        db 3*4 + 0\n        db 3*4 + 1\n        db 3*4 + 2\n        db 3*4 + 3\n</code></pre></p>"},{"location":"basm/directives/#while","title":"WHILE","text":"<pre><code>CPT=3\n\n    while CPT &gt; 0\n        db CPT\nCPT=CPT-1\n    wend\n</code></pre>"},{"location":"basm/directives/#repeat","title":"REPEAT","text":"<p>REPEAT AMOUNT [, COUNTER [, START]]     INNER LISTING REND</p> <pre><code>start\n    repeat 3, count\n        incbin 'AZERTY{{count}}.TXT'\n    rend\n\n\n    assert char(memory(start+0)) == 'A'\n    assert char(memory(start+1)) == 'Z'\n    assert char(memory(start+2)) == 'E'\n    assert char(memory(start+3)) == 'R'\n    assert char(memory(start+4)) == 'T'\n    assert char(memory(start+5)) == 'Y'\n    assert char(memory(start+6)) == 'U'\n    assert char(memory(start+7)) == 'I'\n    assert char(memory(start+8)) == 'O'\n    assert char(memory(start+9)) == 'P'\n\n    assert char(memory(start+10)) == 'Q'\n    assert char(memory(start+11)) == 'S'\n    assert char(memory(start+12)) == 'D'\n    assert char(memory(start+13)) == 'F'\n    assert char(memory(start+14)) == 'G'\n    assert char(memory(start+15)) == 'H'\n    assert char(memory(start+16)) == 'J'\n    assert char(memory(start+17)) == 'K'\n    assert char(memory(start+18)) == 'L'\n    assert char(memory(start+19)) == 'M'\n\n\n    assert char(memory(start+20)) == 'W'\n    assert char(memory(start+21)) == 'X'\n    assert char(memory(start+22)) == 'C'\n    assert char(memory(start+23)) == 'V'\n    assert char(memory(start+24)) == 'B'\n    assert char(memory(start+25)) == 'N'\n</code></pre>"},{"location":"basm/directives/#iterate","title":"ITERATE","text":"<pre><code>ITERATE COUNTER, EXPR...\n    INNER LISTING\nIEND\n</code></pre> <p>The expression $i$ is evaluated after having generated the code of expression $i-1$. Take that into account if expressions use $.</p> <p>Example: <pre><code>; Glass inspiration http://www.grauw.nl/projects/glass/\n\n    iterate value, 1, 2, 10\n        add {value}\n        jr nz, @no_inc\n            inc c\n@no_inc\n        call do_stuff\n    iend\n\n\n    iterate value in [11, 12, 110]\n        add {value}\n        jr nz, @no_inc\n            inc c\n@no_inc\n        call do_stuff\n    iend\n\ndo_stuff\n    ret\n</code></pre> Corresponds to: <pre><code>        add 1\n        jr nz, no_inc1\n            inc c\nno_inc1\n        call do_stuff\n\n        add 2\n        jr nz, no_inc2\n            inc c\nno_inc2\n        call do_stuff\n\n        add 10\n        jr nz, no_inc3\n            inc c\nno_inc3\n        call do_stuff\n\n\n        add 11\n        jr nz, no_inc4\n            inc c\nno_inc4\n        call do_stuff\n\n        add 12\n        jr nz, no_inc5\n            inc c\nno_inc5\n        call do_stuff\n\n        add 110\n        jr nz, no_inc6\n            inc c\nno_inc6\n        call do_stuff\n\ndo_stuff\n    ret\n</code></pre></p>"},{"location":"basm/directives/#code-and-data-generation-directives","title":"Code and data generation directives","text":""},{"location":"basm/directives/#macro","title":"MACRO","text":"<p>Example of standard macro: <pre><code>    ; rasm inspired\n    macro LDIXREG register,dep\n        if {dep}&lt;-128 || {dep}&gt;127\n            push BC\n            ld BC,{dep}\n            add IX,BC\n            ld (IX+0),{register}\n            pop BC\n        else\n            ld (IX+{dep}),{register}\n        endif\n    mend\n\n    LDIXREG H,200\n    LDIXREG L,32\n</code></pre></p> <p>Example of macro using raw arguments: <pre><code>    macro BUILD_LABEL r#label\n{label}_first\n    endm\n\n\n    BUILD_LABEL \"HERE\"\n    BUILD_LABEL \"THERE\"\n\n    ifndef HERE_first\n        fail \"macro error\"\n    endif\n    ifndef THERE_first\n        fail \"macro error\"\n    endif\n\n    macro BUILD_CODE r#code\n        {code}\n    endm\n\nSTART_CODE1\n    BUILD_CODE \"xor a\"\n    BUILD_CODE \"ld hl, 0xc9fb : ld (0x38), hl\"\nEND_CODE1\n\nSTART_CODE2\n    xor a\n    ld hl, 0xc9fb : ld (0x38), hl\nEND_CODE2\n\n    assert END_CODE2 - START_CODE2 == END_CODE1 - START_CODE1\n    assert END_CODE2 - START_CODE2 == 7\n\n    assert memory(START_CODE1) == memory(START_CODE2)\n    assert memory(START_CODE1+1) == memory(START_CODE2+1)\n    assert memory(START_CODE1+2) == memory(START_CODE2+2)\n    assert memory(START_CODE1+3) == memory(START_CODE2+3)\n    assert memory(START_CODE1+4) == memory(START_CODE2+4)\n    assert memory(START_CODE1+5) == memory(START_CODE2+5)\n    assert memory(START_CODE1+6) == memory(START_CODE2+6)\n</code></pre></p>"},{"location":"basm/directives/#struct","title":"STRUCT","text":"<p>Description: Structures allow to defined data blocs with semantic. In practice, they replace bunches of <code>DEFB</code>, <code>DEFW</code> directives and enforce checks at assembling (you cannot add more data than expected or forget some). If a label is used before the use of a struct, it is necessary to postfix it by :. Otherwise the assembler thinks the label is a macro or structure call.</p> <p>Synopsis</p> <pre><code>STRUCT &lt;name&gt;\n&lt;filed1&gt; DB|DW|STR|&lt;other struct&gt; [&lt;value&gt;]\n...\n&lt;filedn&gt; DB|DW|&lt;other struct&gt; [&lt;value&gt;]\nENDSTRUCT\n\n\n\n[&lt;label&gt;:] &lt;name&gt; &lt;arg1&gt;, ... , &lt;argn&gt;\n</code></pre> <p>Standard example: <pre><code>    struct color\nr db 1\ng db 2\nb db 3\n    endstruct\n\n    struct point\nx db 4\ny db 5\n    endstruct\n\ncol0:   color (void)\npt0:    point (void)\n\ncol1:   color 'a', 'b', 'c'\npt1:    point 'd', 'e'\n\n    struct colored_point\ncol     color 10, 20, 30\npt      point 10, 20\n    endstruct\n\n\n    colored_point (void)\n</code></pre></p> <p>Example using default values: <pre><code>  ;; Define a 3 fields structure\n  struct point\nxx    db 4\nyy    db 5\nzz    db 6\n  endstruct\n\n  assert point == 3\n  assert point.xx == 0\n  assert point.yy == 1\n  assert point.zz == 2\n\n point 1, 2 , 3\n point ,,8\n point 9\n\n\n; force values\n; : after label name allows to disambiguate parser that does not try to check if label is a macro (less errors/faster)\nmy_point1: point 1, 2, 3\n\n; use all default values\nmy_point2: point (void)\n\n; use default at the end\nmy_point3: point 1\n\n; use default at the beginning\nmy_point4: point ,,1\n\n\np1: point 1, 2 , 3\np2: point ,,8\np3: point 9\n\n\n\n\n    struct triangle\np1 point 1, 2 , 3\np2 point ,,8\np3 point 9 ; third point\n    endstruct\n\n    assert triangle == 9\n    assert triangle.p1 == 0\n    assert triangle.p2 == 3\n    assert triangle.p3 == 6\n\n\nmy_triangle2: triangle [1, 2, 3], [4, 5, 6], [7, 8 , 9]\n\n\n if 0\n\n\nmy_triangle1: triangle\n\nmy_triangle2: triangle [1, 2, 3], , [7, 8 , 9]\n endif\n</code></pre></p>"},{"location":"basm/directives/#data-loading-and-transformation-directives","title":"Data loading and transformation directives","text":"<p>Filenames are stored in a string. These string can do expansion of formulas embedded in {}.</p> <p>basm embeds some files in its executable, they are access under the name \"inner://\" :</p>"},{"location":"basm/directives/#lzapu-lz4-lz48-lz49-lzexo-lzsa1-lzsa2-lzupkr-lzshrinkler-lzx0","title":"LZAPU, LZ4, LZ48, LZ49, LZEXO, LZSA1, LZSA2, LZUPKR, LZSHRINKLER, LZX0","text":"<p>Example: <pre><code>    org 0x100\n\n\n    ld hl, CS_START\n    ld de, 0xc000\n    call aplib.depack\n    jp $\n\nCS_START\n    LZAPU\nINNER_START\n        defs 100\nINNER_STOP\n    LZCLOSE\nCS_STOP\n\n    assert INNER_STOP - INNER_START == 100\n    assert CS_STOP - CS_START &lt; 100\n\n    include \"inner://unaplib.asm\" namespace \"aplib\"\n</code></pre></p>"},{"location":"basm/directives/#incbin-binclude","title":"INCBIN, BINCLUDE","text":"<p><code>INCBIN|BINCLUDE \"fname\" [[, SKIP], AMOUNT]</code></p> <p>Fname can be build with variables.</p> <p>Limitations:</p> <ul> <li>File is loaded fully in memory before being sliced depending on arguments.</li> </ul> <p>Example: <pre><code>here\n    incbin \"AZERTY.TXT\", 2, 3\nthere\n\n    assert peek(here) == 'E'\n    assert peek(here+1) == 'R'\n\n    assert there-here == 3\n</code></pre> with <code>AZERTY.TXT</code> containing the text <code>AZERTYUIOPQSDFGHJKLMWXCVBN</code>.</p>"},{"location":"basm/directives/#inclz4-incl48-incl48-incapu-inclzsa1-inclzsa2","title":"INCLZ4, INCL48, INCL48, INCAPU, INCLZSA1, INCLZSA2","text":"<p><code>INCBIN|BINCLUDE \"fname\" [[, SKIP], AMOUNT]</code></p>"},{"location":"basm/directives/#include-read","title":"INCLUDE, READ","text":"<p><code>INCLUDE|READ [ONCE] \"&lt;fname&gt;\" [AS|MODULE|NAMESPACE \"&lt;module&gt;\"]</code></p> <p>Fname can be build with variables.</p> <p>Example with once: <pre><code>    org 0x4000\n\nSIZE1_start\n    include once \"include_once.asm\"\nSIZE1_stop\n\nSIZE2_start\n    include once \"include_once.asm\"\nSIZE2_stop\n\n    assert (SIZE1_stop - SIZE1_start) != 0\n    assert (SIZE2_stop - SIZE2_start) == 0\n</code></pre></p> <p>Example with namespace: <pre><code>    include \"good_labels.asm\" namespace \"good\"\n\n    ifndef good.outer1\n        fail \"good.outer1 is undefined\"\n    endif\n\n    ifdef outer1\n        fail \"outer1 is defined\"\n    endif\n\n    ifndef good.outer2.inner1\n        fail \"good.outer2.inner1 is undedined\"\n    endif\n</code></pre></p> <p>Files prefixed by <code>inner://</code> are embedded by <code>BASM</code>. Example: <pre><code> include \"inner://opcodes_first_byte.asm\"\n\n org 0x4000\n\n db opcode_inc_l\n inc l\n\n assert memory(0x4000) == memory(0x4001)\n</code></pre></p> <p>In case of conditional assembling, inclusion are only done in the executed branch. This code always assemble as it never includes 'unknonw' file.</p> <pre><code>truc equ 0:if truc:include'unknown':endif:nop\n</code></pre>"},{"location":"basm/directives/#data-saving-and-export","title":"Data saving and export","text":""},{"location":"basm/directives/#export-noexport","title":"EXPORT, NOEXPORT","text":"<p>Example: <pre><code>    org 0x4000\n\n    NOEXPORT\n    EXPORT toto\n\n\nlabel1\nlabel2\ntoto ; only this one is exported\n</code></pre></p>"},{"location":"basm/directives/#save-write","title":"SAVE, WRITE","text":"<ul> <li><code>SAVE \"&lt;fname&gt;\", [[[START], [SIZE]], AMSDOS|BASIC|TAPE]</code></li> <li><code>SAVE \"&lt;fname&gt;\", START, SIZE, DSK, \"&lt;fname.dsk&gt;\" [, SIDE]</code></li> <li><code>SAVE \"&lt;fname&gt;\", START, SIZE, HFE, \"&lt;fname.hfe&gt;\" [, SIDE]</code></li> <li><code>SAVE \"&lt;fname&gt;\", START, SIZE, DISC, \"&lt;fname.hfe&gt;\"|\"&lt;dname.dsk&gt;\" [, SIDE]</code></li> </ul> <p>Unimplemented</p> <p>TAPE option is not coded. Other options are not intensively tested</p> <p>Example: <pre><code>    org 0x4000\n    run $\nFIRST_ADDRESS\n    ld hl, txt\nloop\n    ld a, (hl)\n    or a\n    jp z, $\n\n    push hl\n        call 0xbb5a\n    pop hl\n    inc hl\n    jp loop\n\ntxt\n.start\n    defb \"Hello World!\"\n    defb 0\n.stop\nLAST_ADDRESS\n\n\n    save \"good_save_whole_inner.bin\" ; Save binary without header\n    save \"hello.bin\", FIRST_ADDRESS, LAST_ADDRESS-FIRST_ADDRESS, AMSDOS ; Save a binary with  header\n    save \"hello.bin\", FIRST_ADDRESS, LAST_ADDRESS-FIRST_ADDRESS, DSK, \"hello.dsk\" ; Save binary with  header INSIDE a dsk\n\n    if BASM_FEATURE_HFE\n        save \"hello.bin\", FIRST_ADDRESS, LAST_ADDRESS-FIRST_ADDRESS, HFE, \"hello.hfe\" ; Save binary with  header INSIDE a hfe file\n    endif\n\n    save \"good_save_txt.bin\", txt.start, (txt.stop - txt.start) ; save text without header\n\n\n; cmd line to generate the binary with header\n;    basm good_save.asm --binary -o run.bin \n; cmd line to put it in a dsk\n;    dskmanager test.dsk format --format data42\n;    dskmanager test.dsk add run.bin \n</code></pre></p>"},{"location":"basm/directives/#debug-directives","title":"Debug directives","text":""},{"location":"basm/directives/#assert","title":"ASSERT","text":"<pre><code>ASSERT BOOLEAN_EXPRESSION [, PRINTABLE_EXPRESSION]*\n</code></pre>"},{"location":"basm/directives/#print","title":"PRINT","text":"<p>Example: <pre><code>    print \"Hello world\"\n\nworld = \"World\"\n    print \"hello \", world\n</code></pre></p>"},{"location":"basm/directives/#amstrad-cpc-related-directives","title":"Amstrad CPC related directives","text":""},{"location":"basm/directives/#ticker","title":"TICKER","text":"<p>Description: Compute the execution duration of a block of code</p> <p>Synopsys: <pre><code>TICKER START variable\n instructions\nTICKER STOP\n</code></pre></p> <p>Example 1: <pre><code>; http://mads.atari8.info/mads_eng.html\n\n    TICKER START count\n        WAITNOPS 3\n    TICKER STOP\n\n    assert count == 3\n\n    TICKER START count2\n        nop\n    TICKER STOP\n\n    assert count2 == 1\n</code></pre></p> <p>Example 2: <pre><code>    TICKER START duration_varying_code\n        xor a\n        ld b, 1\n    TICKER STOP\n    assert duration_varying_code == 1 + 2\n    UNDEF duration_varying_code\n\n\n    TICKER START duration_varying_code\n        xor a\n    TICKER STOP\n    assert duration_varying_code == 1 \n    UNDEF duration_varying_code\n\n    TICKER START duration_varying_code\n    TICKER STOP\n    assert duration_varying_code == 0\n    UNDEF duration_varying_code\n\n\n    assert duration(xor a) == 1\n    ;assert duration(xor a : xor a) == 2 ; Does not compile yet Could be a good idea\n\n\n    TICKER START duration_varying_code\n        WAITNOPS 64\n    TICKER STOP\n    assert duration_varying_code == 64\n    UNDEF duration_varying_code\n\n\n    TICKER START duration_stable_code\n        TICKER START duration_varying_code\n            out (c), c\n        TICKER STOP\n        WAITNOPS 64 - duration_varying_code\n    TICKER STOP\n    assert duration_stable_code == 64\n    UNDEF duration_varying_code\n\n\n    MACRO BUILD_STABLE_CODE duration, r#code\n        TICKER START .my_count\n            {code}\n        TICKER STOP\n        ASSERT {duration} &gt;= .my_count\n        WAITNOPS {duration}-.my_count\n\n        IFDEF DEBUG_EXPECTED_DURATION\n            ASSERT .my_count == DEBUG_EXPECTED_DURATION\n        ENDIF\n        UNDEF .my_count\n    ENDM\n\n    DEBUG_EXPECTED_DURATION = 2\n    BUILD_STABLE_CODE 64, \"xor a : xor a\"\n</code></pre></p>"},{"location":"basm/directives/#waitnops","title":"WAITNOPS","text":"<p>Generate a list of instructions that do not modify any registers or memory but is executed with the expected amount of nops. (Currently it is synonym of NOP, but as soon as someone wants to provide clever rules to use less bytes, I'll implement them)</p>"},{"location":"basm/directives/#locomotive","title":"LOCOMOTIVE","text":"<pre><code>    LOCOMOTIVE start\n10 REM Basic loader of binary exec\n20 REM yeah !!\n30 call {start}\n    ENDLOCOMOTIVE\n\nstart\n        ld hl, txt\n.loop\n        ld a, (hl)\n        or a : jr z, .end\n        call #bb5a\n        inc hl\n        jr .loop\n.end\n        jp $\n\ntxt\n    db \"Hello world\", 0\n\n    print \"LOADER START IN \", {hex}start\n    save \"LOADER.BAS\",,,BASIC\n</code></pre>"},{"location":"basm/directives/#snaset","title":"SNASET","text":""},{"location":"basm/functions/","title":"Pixels","text":"<ul> <li><code>mode0_byte_to_pen_at</code></li> <li><code>mode1_byte_to_pen_at</code></li> <li><code>mode2_byte_to_pen_at</code></li> <li><code>pen_at_mode0_byte</code></li> <li><code>pen_at_mode1_byte</code></li> <li><code>pen_at_mode2_byte</code></li> <li><code>pens_to_mode0_byte</code></li> <li><code>pens_to_mode1_byte</code></li> <li><code>pens_to_mode2_byte</code></li> </ul>"},{"location":"basm/functions/#list-functions","title":"List functions","text":"<ul> <li><code>list_new</code></li> <li><code>list_get</code></li> <li><code>list_set</code></li> <li><code>list_len</code></li> <li><code>list_sublist</code></li> <li><code>list_sort</code></li> <li><code>list_argsort</code></li> <li><code>list_push</code></li> </ul>"},{"location":"basm/functions/#string-functions","title":"String functions","text":"<ul> <li><code>string_new</code> </li> <li><code>string_push</code> </li> <li><code>string_concat</code> </li> <li><code>string_from_list</code> </li> </ul>"},{"location":"basm/functions/#matrix-functions","title":"Matrix functions","text":"<p>To be called on a matrix object or a list of list object (WIP).</p> <ul> <li><code>matrix_new</code></li> <li><code>matrix_set</code></li> <li><code>matrix_get</code></li> <li><code>matrix_col</code></li> <li><code>matrix_row</code></li> <li><code>matrix_set_col</code></li> <li><code>matrix_set_row</code></li> <li><code>matrix_width</code></li> <li><code>matrix_height</code></li> </ul>"},{"location":"basm/functions/#file-functions","title":"File functions","text":"<ul> <li><code>load</code></li> </ul>"},{"location":"basm/functions/#section-functions","title":"Section functions","text":"<ul> <li><code>section_start</code></li> <li><code>section_stop</code></li> <li><code>section_length</code></li> <li><code>section_used</code></li> </ul>"},{"location":"basm/syntax/","title":"Z80 Syntax","text":""},{"location":"basm/syntax/#general-syntax","title":"General syntax","text":"<pre><code>LABEL OPCODE1\n      OPCODE2 : OPCODE3\n      DIRECTIVE\n</code></pre> <p>Warning</p> <p>There may be still some subtle parser bugs, but it is possible to span instructions and directives on several lines by ending the previous line with <code>\\</code></p>"},{"location":"basm/syntax/#labels-handling","title":"Labels handling","text":"<p><code>BASM</code> is quite lax on the z80 format: it does not impose to start a label at the very first char of a line and does not force an instruction or directive to not start at the very first line of a char (behavior stolen to <code>rasm</code>). As a consequence there can be ambiguities between labels and macros. If it fails in properly recognizing macros or label, you can guide it by suffixing label declaration by : or by using (void) for macros with no arguments. </p>"},{"location":"basm/syntax/#local-labels","title":"Local labels","text":"<pre><code>outer1\n    jp outer2\n    jp outer2.inner1\n\n\nouter2\n    jp .inner1\n.inner1\n\n    ifndef outer1\n        fail \"outer1 is wrongly undefined\"\n    endif\n\n    ifndef .inner1\n        fail \".inner1 is wrongly undefined\"\n    endif\n\n    ifndef outer2.inner1\n        fail \"outer2.inner1 is wrongly undefined\"\n    endif\n</code></pre>"},{"location":"basm/syntax/#module-handling","title":"module handling","text":"<p><pre><code>    module module1\nlabel1\n    jp module2.label1\n    endmodule\n\n\n\n    module module2\nlabel1 \n    jp module3.module31.label1\n    endmodule\n\n    module module3\n        module module31\nlabel1\n        jp ::label1\n        endmodule\n    endmodule\nlabel1\n</code></pre> would generate a binary similar to <pre><code>    jp label1\nlabel1\n    jp label2\nlabel2\n    jp label3\nlabel3\n</code></pre></p>"},{"location":"basm/syntax/#labels-generation","title":"Labels generation","text":"<p>Labels can be generated thanks to the content of other ones. <pre><code>value=5\nlabel{value+2}\n\n    ifndef label7\n        fail \"unable to build label with expression\"\n    endif\n</code></pre></p>"},{"location":"basm/syntax/#instructions","title":"Instructions","text":"<p>Here is the list of instructions used to validate <code>BASM</code>:</p> <pre><code>; Test of assembling of z80 instructions.\n    LIST\n\n    org $0\n\ndes equ $05\nn   equ $20\nnn  equ $0584\n\n    ; Documented instructions\n;   ADC\n    adc a,(hl)\n    adc a,(ix + des)\n    adc a,(iy + des)\n    adc a,a\n    adc a,b\n    adc a,c\n    adc a,d\n    adc a,e\n    adc a,h\n    adc a,l\n    adc a,n\n\n    adc hl,bc\n    adc hl,de\n    adc hl,hl\n    adc hl,sp\n\n;   ADD\n    add a,(hl)\n    add a,(ix + des)\n    add a,(iy + des)\n    add a,a\n    add a,b\n    add a,c\n    add a,d\n    add a,e\n    add a,h\n    add a,l\n    add a,n\n\n    add hl,bc\n    add hl,de\n    add hl,hl\n    add hl,sp\n\n    add ix,bc\n    add ix,de\n    add ix,ix\n    add ix,sp\n\n    add iy,bc\n    add iy,de\n    add iy,iy\n    add iy,sp\n\n;   AND\n    and (hl)\n    and (ix + des)\n    and (iy + des)\n    and a\n    and b\n    and c\n    and d\n    and e\n    and h\n    and l\n    and n\n\n;   BIT\n    bit 0,(hl)\n    bit 0,(ix + des)\n    bit 0,(iy + des)\n    bit 0,a\n    bit 0,b\n    bit 0,c\n    bit 0,d\n    bit 0,e\n    bit 0,h\n    bit 0,l\n\n    bit 1,(hl)\n    bit 1,(ix + des)\n    bit 1,(iy + des)\n    bit 1,a\n    bit 1,b\n    bit 1,c\n    bit 1,d\n    bit 1,e\n    bit 1,h\n    bit 1,l\n\n    bit 2,(hl)\n    bit 2,(ix + des)\n    bit 2,(iy + des)\n    bit 2,a\n    bit 2,b\n    bit 2,c\n    bit 2,d\n    bit 2,e\n    bit 2,h\n    bit 2,l\n\n    bit 3,(hl)\n    bit 3,(ix + des)\n    bit 3,(iy + des)\n    bit 3,a\n    bit 3,b\n    bit 3,c\n    bit 3,d\n    bit 3,e\n    bit 3,h\n    bit 3,l\n\n    bit 4,(hl)\n    bit 4,(ix + des)\n    bit 4,(iy + des)\n    bit 4,a\n    bit 4,b\n    bit 4,c\n    bit 4,d\n    bit 4,e\n    bit 4,h\n    bit 4,l\n\n    bit 5,(hl)\n    bit 5,(ix + des)\n    bit 5,(iy + des)\n    bit 5,a\n    bit 5,b\n    bit 5,c\n    bit 5,d\n    bit 5,e\n    bit 5,h\n    bit 5,l\n\n    bit 6,(hl)\n    bit 6,(ix + des)\n    bit 6,(iy + des)\n    bit 6,a\n    bit 6,b\n    bit 6,c\n    bit 6,d\n    bit 6,e\n    bit 6,h\n    bit 6,l\n\n    bit 7,(hl)\n    bit 7,(ix + des)\n    bit 7,(iy + des)\n    bit 7,a\n    bit 7,b\n    bit 7,c\n    bit 7,d\n    bit 7,e\n    bit 7,h\n    bit 7,l\n\n;   CALL\n    call nn\n\n    call nz,nn\n    call z,nn\n    call nc,nn\n    call c,nn\n    call po,nn\n    call pe,nn\n    call p,nn\n    call m,nn\n\n;   CCF\n    ccf\n\n;   CP\n    cp (hl)\n    cp (ix + des)\n    cp (iy + des)\n    cp a\n    cp b\n    cp c\n    cp d\n    cp e\n    cp h\n    cp l\n    cp n\n\n    cpd\n    cpdr\n    cpir\n    cpi\n\n;   CPL\n    cpl\n\n;   DAA\n    daa\n\n;   DEC\n    dec (hl)\n    dec (ix + des)\n    dec (iy + des)\n    dec a\n    dec b\n    dec c\n    dec d\n    dec e\n    dec h\n    dec l\n\n    dec bc\n    dec de\n    dec hl\n    dec ix\n    dec iy\n    dec sp\n\n;   DI\n    di\n\n;   DJNZ\nl1  djnz l1\n\n;   EI\n    ei\n\n;   EX\n    ex af,af'\n\n    ex de,hl\n\n    ex (sp),hl\n    ex (sp),ix\n    ex (sp),iy\n\n    exx\n\n;   HALT\n    halt\n\n;   IM\n    im 0\n    im 1\n    im 2\n\n;   IN\n    in a,(c)\n    in b,(c)\n    in c,(c)\n    in d,(c)\n    in e,(c)\n    in h,(c)\n    in l,(c)\n\n    in a,(n)\n\n    ind\n    indr\n    ini\n    inir\n\n;   INC\n    inc (hl)\n    inc (ix + des)\n    inc (iy + des)\n    inc a\n    inc b\n    inc c\n    inc d\n    inc e\n    inc h\n    inc l\n\n    inc bc\n    inc de\n    inc hl\n    inc ix\n    inc iy\n    inc sp\n\n;   JP\n    jp nn\n\n    jp (hl)\n    jp (ix)\n    jp (iy)\n\n    jp nz,nn\n    jp z,nn\n    jp nc,nn\n    jp c,nn\n    jp po,nn\n    jp pe,nn\n    jp p,nn\n    jp m,nn\n\n;   JR\n    jr $ + $22\n\n    jr nz,$ + $22\n    jr z,$ + $22\n    jr nc,$ + $22\n    jr c,$ + $22\n\n;   LD\n    ld (bc),a\n    ld (de),a\n\n    ld (hl),a\n    ld (hl),b\n    ld (hl),c\n    ld (hl),d\n    ld (hl),e\n    ld (hl),h\n    ld (hl),l\n    ld (hl),n\n\n    ld (ix + des),a\n    ld (ix + des),b\n    ld (ix + des),c\n    ld (ix + des),d\n    ld (ix + des),e\n    ld (ix + des),h\n    ld (ix + des),l\n    ld (ix + des),n\n\n    ld (iy + des),a\n    ld (iy + des),b\n    ld (iy + des),c\n    ld (iy + des),d\n    ld (iy + des),e\n    ld (iy + des),h\n    ld (iy + des),l\n    ld (iy + des),n\n\n    ld (nn),a\n\n    ld (nn),bc\n    ld (nn),de\n    ld (nn),hl\n    ld (nn),ix\n    ld (nn),iy\n\n    ld (nn),sp\n\n    ld a,(bc)\n    ld a,(de)\n    ld a,(hl)\n    ld a,(ix + des)\n    ld a,(iy + des)\n    ld a,(nn)\n    ld a,a\n    ld a,b\n    ld a,c\n    ld a,d\n    ld a,e\n    ld a,h\n    ld a,l\n    ld a,n\n\n    ld b,(hl)\n    ld b,(ix + des)\n    ld b,(iy + des)\n    ld b,a\n    ld b,b\n    ld b,c\n    ld b,d\n    ld b,e\n    ld b,h\n    ld b,l\n    ld b,n\n\n    ld c,(hl)\n    ld c,(ix + des)\n    ld c,(iy + des)\n    ld c,a\n    ld c,b\n    ld c,c\n    ld c,d\n    ld c,e\n    ld c,h\n    ld c,l\n    ld c,n\n\n    ld d,(hl)\n    ld d,(ix + des)\n    ld d,(iy + des)\n    ld d,a\n    ld d,b\n    ld d,c\n    ld d,d\n    ld d,e\n    ld d,h\n    ld d,l\n    ld d,n\n\n    ld e,(hl)\n    ld e,(ix + des)\n    ld e,(iy + des)\n    ld e,a\n    ld e,b\n    ld e,c\n    ld e,d\n    ld e,e\n    ld e,h\n    ld e,l\n    ld e,n\n\n    ld h,(hl)\n    ld h,(ix + des)\n    ld h,(iy + des)\n    ld h,a\n    ld h,b\n    ld h,c\n    ld h,d\n    ld h,e\n    ld h,h\n    ld h,l\n    ld h,n\n\n    ld l,(hl)\n    ld l,(ix + des)\n    ld l,(iy + des)\n    ld l,a\n    ld l,b\n    ld l,c\n    ld l,d\n    ld l,e\n    ld l,h\n    ld l,l\n    ld l,n\n\n    ld a,i\n    ld i,a\n\n    ld a,r\n    ld r,a\n\n    ld bc,(nn)\n    ld de,(nn)\n    ld hl,(nn)\n    ld ix,(nn)\n    ld iy,(nn)\n    ld sp,(nn)\n\n    ld bc,nn\n    ld de,nn\n    ld hl,nn\n    ld ix,nn\n    ld iy,nn\n\n\n    ld sp,hl\n    ld sp,ix\n    ld sp,iy\n    ld sp,nn\n\n    ldd\n    lddr\n    ldi\n    ldir\n\n;   NEG\n    neg\n\n;   NOP\n    nop\n\n;   OR\n    or (hl)\n    or (ix + des)\n    or (iy + des)\n    or a\n    or b\n    or c\n    or d\n    or e\n    or h\n    or l\n    or n\n\n\n;   OUT\n    out (c),a\n    out (c),b\n    out (c),c\n    out (c),d\n    out (c),e\n    out (c),h\n    out (c),l\n    out (n),a\n\n    outd\n    otdr\n    outi\n    otir\n\n;   POP\n    pop af\n    pop bc\n    pop de\n    pop hl\n    pop ix\n    pop iy\n\n;   PUSH\n    push af\n    push bc\n    push de\n    push hl\n    push ix\n    push iy\n\n;   RES\n    res 0,(hl)\n    res 0,(ix + des)\n    res 0,(iy + des)\n    res 0,a\n    res 0,b\n    res 0,c\n    res 0,d\n    res 0,e\n    res 0,h\n    res 0,l\n\n    res 1,(hl)\n    res 1,(ix + des)\n    res 1,(iy + des)\n    res 1,a\n    res 1,b\n    res 1,c\n    res 1,d\n    res 1,e\n    res 1,h\n    res 1,l\n\n    res 2,(hl)\n    res 2,(ix + des)\n    res 2,(iy + des)\n    res 2,a\n    res 2,b\n    res 2,c\n    res 2,d\n    res 2,e\n    res 2,h\n    res 2,l\n\n    res 3,(hl)\n    res 3,(ix + des)\n    res 3,(iy + des)\n    res 3,a\n    res 3,b\n    res 3,c\n    res 3,d\n    res 3,e\n    res 3,h\n    res 3,l\n\n    res 4,(hl)\n    res 4,(ix + des)\n    res 4,(iy + des)\n    res 4,a\n    res 4,b\n    res 4,c\n    res 4,d\n    res 4,e\n    res 4,h\n    res 4,l\n\n    res 5,(hl)\n    res 5,(ix + des)\n    res 5,(iy + des)\n    res 5,a\n    res 5,b\n    res 5,c\n    res 5,d\n    res 5,e\n    res 5,h\n    res 5,l\n\n    res 6,(hl)\n    res 6,(ix + des)\n    res 6,(iy + des)\n    res 6,a\n    res 6,b\n    res 6,c\n    res 6,d\n    res 6,e\n    res 6,h\n    res 6,l\n\n    res 7,(hl)\n    res 7,(ix + des)\n    res 7,(iy + des)\n    res 7,a\n    res 7,b\n    res 7,c\n    res 7,d\n    res 7,e\n    res 7,h\n    res 7,l\n\n;   RET\n    ret\n\n    ret z\n    ret nz\n    ret c\n    ret nc\n    ret po\n    ret pe\n    ret p\n    ret m\n\n    reti\n    retn\n\n;   RL\n    rl (hl)\n    rl (ix + des)\n    rl (iy + des)\n    rl a\n    rl b\n    rl c\n    rl d\n    rl e\n    rl h\n    rl l\n\n;   RLA\n    rla\n\n;   RLC\n    rlc (hl)\n    rlc (ix + des)\n    rlc (iy + des)\n    rlc a\n    rlc b\n    rlc c\n    rlc d\n    rlc e\n    rlc h\n    rlc l\n\n;   RLCA\n    rlca\n\n;   RLD\n    rld\n\n;   RR\n    rr (hl)\n    rr (ix + des)\n    rr (iy + des)\n    rr a\n    rr b\n    rr c\n    rr d\n    rr e\n    rr h\n    rr l\n\n;   RRA\n    rra\n\n;   RRC\n    rrc (hl)\n    rrc (ix + des)\n    rrc (iy + des)\n    rrc a\n    rrc b\n    rrc c\n    rrc d\n    rrc e\n    rrc h\n    rrc l\n\n;   RRCA\n    rrca\n\n;   RRD\n    rrd\n\n;   RST\n    rst $00\n    rst $08\n    rst $10\n    rst $18\n    rst $20\n    rst $28\n    rst $30\n    rst $38\n\n;   SBC\n    sbc a,(hl)\n    sbc a,(ix + des)\n    sbc a,(iy + des)\n    sbc a,a\n    sbc a,b\n    sbc a,c\n    sbc a,d\n    sbc a,e\n    sbc a,h\n    sbc a,l\n    sbc a,n\n\n    sbc hl,bc\n    sbc hl,de\n    sbc hl,hl\n    sbc hl,sp\n\n;   SCF\n    scf\n\n;   SET\nlabel    set 0,(hl)\n    set 0,(ix + des)\n    set 0,(iy + des)\n    set 0,a\n    set 0,b\n    set 0,c\n    set 0,d\n    set 0,e\n    set 0,h\n    set 0,l\n\n    set 1,(hl)\n    set 1,(ix + des)\n    set 1,(iy + des)\n    set 1,a\n    set 1,b\n    set 1,c\n    set 1,d\n    set 1,e\n    set 1,h\n    set 1,l\n\n    set 2,(hl)\n    set 2,(ix + des)\n    set 2,(iy + des)\n    set 2,a\n    set 2,b\n    set 2,c\n    set 2,d\n    set 2,e\n    set 2,h\n    set 2,l\n\n    set 3,(hl)\n    set 3,(ix + des)\n    set 3,(iy + des)\n    set 3,a\n    set 3,b\n    set 3,c\n    set 3,d\n    set 3,e\n    set 3,h\n    set 3,l\n\n    set 4,(hl)\n    set 4,(ix + des)\n    set 4,(iy + des)\n    set 4,a\n    set 4,b\n    set 4,c\n    set 4,d\n    set 4,e\n    set 4,h\n    set 4,l\n\n    set 5,(hl)\n    set 5,(ix + des)\n    set 5,(iy + des)\n    set 5,a\n    set 5,b\n    set 5,c\n    set 5,d\n    set 5,e\n    set 5,h\n    set 5,l\n\n    set 6,(hl)\n    set 6,(ix + des)\n    set 6,(iy + des)\n    set 6,a\n    set 6,b\n    set 6,c\n    set 6,d\n    set 6,e\n    set 6,h\n    set 6,l\n\n    set 7,(hl)\n    set 7,(ix + des)\n    set 7,(iy + des)\n    set 7,a\n    set 7,b\n    set 7,c\n    set 7,d\n    set 7,e\n    set 7,h\n    set 7,l\n\n;   SLA\n    sla (hl)\n    sla (ix + des)\n    sla (iy + des)\n    sla a\n    sla b\n    sla c\n    sla d\n    sla e\n    sla h\n    sla l\n\n;   SRA\n    sra (hl)\n    sra (ix + des)\n    sra (iy + des)\n    sra a\n    sra b\n    sra c\n    sra d\n    sra e\n    sra h\n    sra l\n\n;   SRL\n    srl (hl)\n    srl (ix + des)\n    srl (iy + des)\n    srl a\n    srl b\n    srl c\n    srl d\n    srl e\n    srl h\n    srl l\n\n;   SUB\n    sub (hl)\n    sub (ix + des)\n    sub (iy + des)\n    sub a\n    sub b\n    sub c\n    sub d\n    sub e\n    sub h\n    sub l\n    sub n\n\n;   XOR\n    xor (hl)\n    xor (ix + des)\n    xor (iy + des)\n    xor a\n    xor b\n    xor c\n    xor d\n    xor e\n    xor h\n    xor l\n    xor n\n\n    ; Undocumented instructions\n; IN\n    in (c)      ; DEFB $ED,$70\n    in f,(c)    ; DEFB $ED,$70\n\n; OUT\n    out (c)     ; DEFB $ED,$71\n    out (c),f   ; DEFB $ED,$71\n\n; SLL\n    sll (hl)\n    sll (ix+des)\n    sll (iy+des)\n    sll a\n    sll b\n    sll c\n    sll d\n    sll e\n    sll h\n    sll l\n\n; IX and IY 8 bits halfs\n    add a,ixh\n    add a,ixl\n    add a,iyh\n    add a,iyl\n\n    adc a,ixh\n    adc a,ixl\n    adc a,iyh\n    adc a,iyl\n\n    and ixh\n    and ixl\n    and iyh\n    and iyl\n\n    cp ixh\n    cp ixl\n    cp iyh\n    cp iyl\n\n    dec ixh\n    dec ixl\n    dec iyh\n    dec iyl\n\n    inc ixh\n    inc ixl\n    inc iyh\n    inc iyl\n\n    ld a,ixh\n    ld b,ixh\n    ld c,ixh\n    ld d,ixh\n    ld e,ixh\n    ;ld h,ixh\n    ;ld l,ixh\n\n    ld a,ixl\n    ld b,ixl\n    ld c,ixl\n    ld d,ixl\n    ld e,ixl\n    ;ld h,ixl\n    ;ld l,ixl\n\n    ld a,iyh\n    ld b,iyh\n    ld c,iyh\n    ld d,iyh\n    ld e,iyh\n    ;ld h,iyh\n    ;ld l,iyh\n\n    ld a,iyl\n    ld b,iyl\n    ld c,iyl\n    ld d,iyl\n    ld e,iyl\n    ;ld h,iyl\n    ;ld l,iyl\n\n    ld ixh,a\n    ld ixh,b\n    ld ixh,c\n    ld ixh,d\n    ld ixh,e\n    ld ixh,ixh\n    ld ixh,ixl\n    ld ixh,n\n\n    ld ixl,a\n    ld ixl,b\n    ld ixl,c\n    ld ixl,d\n    ld ixl,e\n    ld ixl,ixh\n    ld ixl,ixl\n    ld ixl,n\n\n    ld iyh,a\n    ld iyh,b\n    ld iyh,c\n    ld iyh,d\n    ld iyh,e\n    ld iyh,iyh\n    ld iyh,iyl\n    ld iyh,n\n\n    ld iyl,a\n    ld iyl,b\n    ld iyl,c\n    ld iyl,d\n    ld iyl,e\n    ld iyl,iyh\n    ld iyl,iyl\n    ld iyl,n\n\n    or ixh\n    or ixl\n    or iyh\n    or iyl\n\n    sbc a,ixh\n    sbc a,ixl\n    sbc a,iyh\n    sbc a,iyl\n\n    sub ixh\n    sub ixl\n    sub iyh\n    sub iyl\n\n    xor ixh\n    xor ixl\n    xor iyh\n    xor iyl\n\n\n    end\n</code></pre>"},{"location":"basm/syntax/#fake-instructions","title":"Fake instructions","text":"<p>To ease coding, several fake instructions are allowed by <code>BASM</code>. It replaces them by the combination of true instructions.</p> <p>Here is a subset of the possibilities.</p> <p>Failure</p> <p>Most accepted fake instructions are missing from the listing</p> <pre><code>    ld hl, de\n    jp hl\n    jp ix\n    jp iy\n    push hl, de, bc\n    pop bc, de, hl\n\n\n    SRL BC\n    SRL DE\n    SRL HL\n\n    SRA BC \n    SRA DE \n    SRA HL\n\n    SLL BC\n    SLL DE\n    SLL HL\n\n    SLA BC\n    SLA DE\n    SLA HL\n\n    RR BC\n    RR DE\n    RR HL\n\n    RL BC\n    RL DE\n    RL HL\n\n\n    RLC BC \n    RLC DE\n    RLC HL\n\n    RRC BC \n    RRC DE\n    RRC HL\n\n\n    RST Z,#38\n    RST NZ,#38\n    RST C,#38\n    RST NC,#38\n\n    ld hl, sp\n</code></pre>"},{"location":"basm/syntax/#comments","title":"Comments","text":""},{"location":"basm/syntax/#one-line-comment","title":"One line comment","text":"<pre><code>; This is a comment\n</code></pre>"},{"location":"basm/syntax/#multiline-comment","title":"Multiline comment","text":"<p><pre><code>/*\n this is \n another\n comment */\n\n\n## Expressions\n\n### Types\n\n- int\n- char, string\n- list, matrix\n\n### Filenames\n\nA normal file is represented by a string.\n</code></pre> \"standard.filename\" <pre><code>A file insided a disk is represented in a string that contains the dsk name, followed by `#` then the file of interest within the dsk\n</code></pre> \"image.dsk#filename\" <pre><code>## Special variables\n\n - $: get the current code address\n - $$: get the current output address\n\n\nExample:\n```z80\n    assert $ == 0\n    assert $$ == 0\n\n    org 0x100\n    assert $ == 0x100\n    assert $$ == 0x100\n    nop\n    assert $ == 0x101\n    assert $$ == 0x101\n\n\n    org 0x200, 0x300\n    assert $ == 0x200\n    assert $$ == 0x300\n    nop\n    assert $ == 0x201\n    assert $$ == 0x301\n</code></pre></p>"},{"location":"basm/syntax/#provided-functions","title":"Provided functions","text":"<p>Failure</p> <p>Need to document all functions</p>"},{"location":"basm/syntax/#z80-related-functions","title":"Z80 related functions","text":""},{"location":"basm/syntax/#assemble","title":"assemble","text":"<p><code>assemble(str)</code> consider the string <code>str</code> to be a list of instructions (no directives) and returns the list of bytes corresponding to the assembled version of the given string.</p> <pre><code>    assert list_len(assemble(\" nop\")) == 1\n    assert list_len(assemble(\" nop : nop \")) == 2\n    assert list_len(assemble(\"\")) == 0\n</code></pre>"},{"location":"basm/syntax/#duration","title":"duration","text":"<ul> <li><code>duration(instruction)</code> returns the number of nop of the instruction</li> </ul>"},{"location":"basm/syntax/#opcode","title":"opcode","text":"<pre><code>    ld a, opcode(inc e)\n    ld a, opcode(dec e)\n</code></pre>"},{"location":"basm/syntax/#amstrad-cpc-video-handling","title":"Amstrad CPC video handling","text":"<ul> <li>mode0_byte_to_pen_at</li> <li>mode1_byte_to_pen_at</li> <li>mode2_byte_to_pen_at</li> <li>pen_at_mode0_byte</li> <li>pen_at_mode1_byte</li> <li>pen_at_mode2_byte</li> <li>pens_to_mode0_byte</li> <li>pens_to_mode1_byte</li> <li>pens_to_mode2_byte</li> </ul>"},{"location":"basm/syntax/#list-handling","title":"List handling","text":"<ul> <li>list_new</li> <li>list_get(LIST, INDEX)</li> <li>list_set</li> <li>list_len</li> <li><code>list_sublist(list, start, end)</code> -&gt; list: Return a new list from start until end not included </li> <li>list_sort</li> <li>list_argsort</li> <li>list_push</li> </ul>"},{"location":"basm/syntax/#string-handling","title":"String handling","text":"<ul> <li>string_new</li> <li>string_push</li> <li>string_concat</li> <li>string_from_list</li> </ul>"},{"location":"basm/syntax/#matrix-handling","title":"Matrix handling","text":"<ul> <li>matrix_new</li> <li>matrix_set</li> <li>matrix_get</li> <li>matrix_col</li> <li>matrix_row</li> <li>matrix_set_row</li> <li>matrix_set_col</li> <li>matrix_width</li> <li>matrix_height</li> </ul>"},{"location":"basm/syntax/#file-handing","title":"File handing","text":"<ul> <li><code>load(fname) -&gt; list of bytes</code>: return the bytes from the given file name</li> </ul>"},{"location":"basm/syntax/#memory-handling","title":"Memory handling","text":""},{"location":"basm/syntax/#memoryaddr","title":"memory(addr)","text":"<pre><code>    org 0x4000\n    assert memory(label2) == 4\n\nlabel1\n    db 1, 2, 3\n\nlabel2\n    db 4, 5, 6\n\n    assert memory(label1) == 1\n    assert memory(label1+2) == 3\n</code></pre>"},{"location":"basm/syntax/#user-defined-functions","title":"User defined functions","text":"<p><code>BASM</code> allows to define functions that can be used in any expression. The functions are fed with parameters and execute conditional directives as well as directives able to handle variables. They finish at the execution of the <code>RETURN</code> directive.</p> <pre><code>FUNCTION [ARG1 [, ARGN]]\n    INSTRUCTIONS\n    RETURN VALUE\nENDFUNCTION\n</code></pre> <p>Failure</p> <p>Better explain how to build function</p> <p>Example of the fibonacci function:</p> <pre><code>    function fibo nb\n        if {nb} == 0\n            return 0\n        else if {nb} == 1\n            return 1\n        else\n            return fibo({nb}-1) + fibo({nb}-2)\n        endif\n\n    endfunction\n\n    assert fibo(0) == 0\n    assert fibo(1) == 1\n    assert fibo(2) == 1\n\n    assert fibo(5) == 5\n\n    assert fibo(10) == 55\n</code></pre> <p>Example of function to handle lists: <pre><code>    ; Skip the {start} first element of list {l}\n    FUNCTION SKIP, l, start\n        len = list_len({l})\n        if {start} &lt; len\n            return list_sublist({l}, {start}, len)\n        else\n            return []\n        endif\n    ENDFUNCTION\n\n    ; Take the {amount} first element of list {l}\n    FUNCTION TAKE, l, amount\n        assert {amount} &gt; 0\n        len = list_len({l})\n        start = 0\n        finish = start + min({amount}, len) ; seems to not work for un unknown reason\n        if {amount} &gt; len\n            finish = len\n        else\n            finish = {amount}\n        endif\n        return list_sublist({l}, start, finish)\n    ENDFUNCTION\n\n    ; Reverse list {l}\n    FUNCTION REVERT, l\n        new = []\n        nb = list_len({l})\n        for idx, 0, nb-1\n            new = list_push(new, list_get({l}, nb-1-{idx}))\n        endfor\n        return new\n    ENDFUNCTION\n\n    assert list_len([1, 2, 3, 4]) == 4\n    assert list_sublist([1, 2, 3, 4], 0, 2) == [1,2]\n    assert list_sublist([1, 2, 3, 4], 0, 4) == [1, 2, 3, 4]\n\n\n    ; Various test to check appropriate behavior\n    assert SKIP([1, 2, 3, 4], 2) == [3, 4]\n    assert SKIP([1, 2, 3, 4], 5) == []\n\n    assert TAKE([1, 2, 3, 4], 2) == [1, 2]\n    assert min(4,5) == 4\n    assert TAKE([1, 2, 3, 4], 4) == [1, 2, 3, 4]\n    assert TAKE([1, 2, 3, 4], 10) == [1, 2, 3, 4]\n\n    assert REVERT([1, 2, 3, 4]) == [4, 3, 2, 1]\n    assert list_len(load(\"hello.sna\")) == 4674\n\n    assert list_len(TAKE(load(\"hello.sna\"), 8)) == 8\n\n\n\n    assert string_from_list(TAKE(load(\"hello.sna\"), 8)) == \"MV - SNA\"\n\n    ; Write in memory 8 bytes from the given file\n    snapshot = load(\"hello.sna\")\n    header_id = TAKE(snapshot, 8)\n    db header_id\n\n    ; Check that memory is correctly set\n    assert peek(0) == \"M\"\n    assert peek(7) == \"A\"\n</code></pre></p>"},{"location":"bndbuild/","title":"Bndbuild","text":""},{"location":"bndbuild/#synopsis","title":"Synopsis","text":"<p>Crossdev tool tailored to build Amstrad CPC project although it can generalize to z80-related projects or even any buildable projects. It embeds the Benediction crossdev ecosystem such as <code>basm</code>, <code>m4</code>, <code>img2cpc</code> but can still execute external programs such as <code>sjasmplus</code>, <code>rasm</code>, <code>winape</code>, <code>ace</code> it is able to download and install or any command chosen by the user.</p> <p>It can be used  as a command launcher or a build system and is available as a command line and a graphical version.</p> <p>As it is still in beta stage, I do not properly play with version numbering. This will be fixed as soon as there is a user base using it.</p>"},{"location":"bndbuild/#command-launcher","title":"Command launcher","text":"<p>You can see <code>bndbuild</code> as a universal proxy to plenty of crossdev tools without manually installing them. See the documentation and the <code>--direct</code> argument. So if you are not a user of the other Benediction tools, and whatever you are using the build system,  <code>bndbuild</code> can still ease your crossdev workflow by taking care of downloading, installing and launching tools. See the help for the list of available tools. Fell free to request more in the issue tracker.</p>"},{"location":"bndbuild/#build-system","title":"Build system","text":"<p>You can see <code>bndbuild</code> as a build system similar to Makefile but with a different syntax and better integration. The build rules are described in a <code>yaml</code> file templated by <code>jinja</code>  engine. Check for example a simple test project at https://github.com/cpcsdk/rust.cpclib/tree/master/cpclib-bndbuild/tests/dummy folder, or a more complicated one that use various commands and templating at https://github.com/cpcsdk/rust.cpclib/tree/master/cpclib-bndbuild/tests/ucpm.</p> <p>The documentation is quite minimal at the moment, but included examples code should be still valid and assembled properly.  The user base being quite small, lots of bugs can remain. Do note hesitate to fill issues https://github.com/cpcsdk/rust.cpclib/issues or propose fixes.</p>"},{"location":"bndbuild/#installation","title":"Installation","text":""},{"location":"bndbuild/#download","title":"Download","text":"<p>Prefer to compile yourself <code>bndbuild</code>. But you can still download latest versions here:</p> <ul> <li>Command line version for Windows</li> <li>Command line version for Linux</li> <li>Graphical version for Windows</li> <li>Graphical version for Linux</li> <li>Installer for the experimental new graphical version for Windows</li> <li>Installer for the experimental new graphical version for Linux</li> </ul> <p>Windows antivirus tend to flag <code>rust</code> programs as virus. Sadly it is the case for <code>bndbuild</code>.</p>"},{"location":"bndbuild/#compile","title":"Compile","text":"<p>You need to install the <code>rust</code> toolchain with its nightly version to compile <code>bndbuild</code> (https://rustup.rs/) as well as some additional dependencies.</p> <ul> <li>unbuntu-like dependencies: libgtk-3-dev libcogl-pango-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libspeechd-dev libxkbcommon-dev libssl-dev libxdo-dev</li> <li>windows: msvc</li> <li>macos: ??? it probably does not compile yet</li> </ul> <pre><code>$ git clone git@github.com:cpcsdk/rust.cpclib.git --depth 1\n$ cd rust.cpclib/\n$ cargo install --path cpclib-bndbuild          # For the command line version\n$ cargo install --path cpclib-visual-bndbuild   # For the graphical version\n$ cd cpclib-bndbuild-tauri &amp;&amp; cargo tauri build # To create the new version. The folder target/release/bundle contains the installers\n</code></pre>"},{"location":"bndbuild/#build-format","title":"Build format","text":"<p>The rules description file must respect the <code>yaml</code> text file format. It can be named <code>bndbuild.yml</code>, <code>bnd.build</code> or <code>build.bnd</code> but this can be overridden by the <code>-f</code> argument. It contains list of rules. Each rule can have the following keys:</p> <ul> <li><code>tgt</code>: to list the files build by the rule. Either all the files in one line or one file per line. </li> <li><code>dep</code>: to list the files needed to build the rule. Either all the files in one line or one file per line.</li> <li><code>cmd</code>: a command, or a list of commands, executed by the rule. Commands prefixed by <code>-</code> can silently fail. <code>$@</code> is replaced by the first target and <code>$&lt;</code> is replaced by the first dependency.&gt;</li> <li><code>help</code>: an optional help text to describe the rule.</li> <li><code>phony</code>: an optional tag to express the rule does not generate anyfile (it is inferred when the commands are not extern). Mainly serves for the <code>--watch</code> argument.</li> <li> <p><code>constraint</code>: Allows to filter the rule for the specified expression</p> </li> <li> <p>Functions: <code>hostname(MY_HOST)</code> is true if the machine is <code>MY_HOST</code>. <code>os(windows)</code>, <code>os(linux)</code>, and <code>os(macosx)</code> are true for the specified os.</p> </li> <li>Negation: <code>not(EXPRESSION)</code> is true when <code>EXPRESSION</code> is false</li> <li>Combination: <code>and(EXPRESSION, EXPRESSION, ...)</code> and <code>or(EXPRESSION, EXPRESSION, ...)</code> allow to combine expressions</li> </ul> <p>If you know how to configure your IDE to statically verify your yaml files, here is the configuration you can provide: https://raw.githubusercontent.com/cpcsdk/rust.cpclib/refs/heads/master/cpclib-bndbuild/schema.json</p>"},{"location":"bndbuild/#templating","title":"Templating","text":"<p>A jinja-like templating is used to generate the final yaml file : https://docs.rs/minijinja/latest/minijinja/syntax/index.html. So you can automatically generate rules with its macro system.</p>"},{"location":"bndbuild/#preset-variables","title":"Preset variables","text":"<ul> <li><code>FAP_INIT_PATH</code>: path to the assembled player initializer for fap</li> <li><code>FAP_PLAY_PATH</code>: path to the assembled player for fap</li> <li><code>AKG_PATH</code>: path the the AKG player</li> </ul>"},{"location":"bndbuild/#example","title":"Example","text":"<p>Here is an example to build a dummy Amstrad CPC project and execute on the real machine thanks to the m4. It is available in tests/dummy (the repository does not contains the external tools needed to properly build the project. It is straightforward to add them). Successive calls to the build task do nothing as soon as no file has been modified. It is also possible to watch the dependencies of a given task to automatically build it when they are modified. This cannot be seen with the capture, but each time m4 command is launched, the project is send into the CPC machine (it takes several seconds however).</p> <p></p>"},{"location":"bndbuild/#help","title":"Help","text":"<pre><code>bndbuild --help`\nCan be used as a project builder similar to Make, but using a yaml project description, or can be used as any Benediction crossdev tool (basm, img2cpc, xfer, disc). This way only bndbuild needs to be installed.\n\nBenediction CPC demo project builder\n\nUsage: bndbuilder [OPTIONS] [TARGET]...\n\nArguments:\n  [TARGET]...\n          Provide the target(s) to run.\n\nOptions:\n  -h, --help [&lt;CMD&gt;]\n          Show the help of the given subcommand CMD.\n\n          [default: bndbuild]\n          [possible values: cpc, emu, emuctrl, emucontrol, ace, acedl, winape, cpcec, amspirit, sugarbox, basm, assemble, orgams, rasm, sjasmplus, vasm, bndbuild, build, cp, copy, dsk, disc, echo, print, extern, fap, img2cpc, imgconverter, hideur, impdsk, impdisc, martine, rm, del, xfer, cpcwifi, m4]\n\n      --direct\n          Bypass the task file and directly execute a command along: [cpc, emu, emuctrl, emucontrol, ace, acedl, winape, cpcec, amspirit, sugarbox, basm, assemble, orgams, rasm, sjasmplus, vasm, bndbuild, build, cp, copy, dsk, disc, echo, print, extern, fap, img2cpc, imgconverter, hideur, impdsk, impdisc, martine, rm, del, xfer, cpcwifi, m4].\n\n  -V, --version\n          Print version\n\n      --dot\n          Generate the .dot representation of the selected bndbuild.yml file\n\n      --show\n          Show the file AFTER interpreting the templates\n\n  -f, --file &lt;FILE&gt;\n          Provide the YAML file for the given project.\n\n  -w, --watch\n          Watch the targets and permanently rebuild them when needed.\n\n  -l, --list\n          List the available targets\n\n  -D, --define &lt;DEFINE_SYMBOL&gt;\n          Provide a symbol with its value (default set to 1)\n\n  -c, --clear-cache [&lt;clear&gt;]\n          Clear cache folder that contains all automatically downloaded executables. Can optionally take one argument to clear the cache of the corresponding executable.\n\n          [possible values: ace, acedl, winape, cpcec, amspirit, sugarbox, rasm, sjasmplus, vasm, fap, impdsk, impdisc, martine]\n\n      --init\n          Init a new project by creating it\n\n  -a, --add &lt;add&gt;\n          Add a new basm target in an existing bndbuild.yml (or create it)\n\n  -d, --dep &lt;dep&gt;\n          The source files\n\n  -k, --kind &lt;kind&gt;\n          The kind of command to be added in the yaml file\n\n          [possible values: cpc, emu, emuctrl, emucontrol, ace, acedl, winape, cpcec, amspirit, sugarbox, basm, assemble, orgams, rasm, sjasmplus, vasm, bndbuild, build, cp, copy, dsk, disc, echo, print, extern, fap, img2cpc, imgconverter, hideur, impdsk, impdisc, martine, rm, del, xfer, cpcwifi, m4]\n\ncpclib-bndbuild 0.6.0 embedded by cpclib-bndbuild 0.6.0\n</code></pre>"},{"location":"bndbuild/#commands","title":"Commands","text":"<p>The <code>--direct -- COMMAND [ARG...]</code> allows to directly launch a command without managing a build file. <code>COMMAND</code> can be any command accepted in <code>cmd</code> key (they are listed in the documentation of <code>--help</code>). The commands are either included by the application (so limited to cpclib commands and os agnostic), or accessible externally (no limitation, but os dependent). Some command may have an alias.</p> <p>Several commands need to be downloaded (so internet is required), assembled (so their prerequisites need to be installed). There is no (yet) cleanup if download/compilation fail. So think to do <code>bndbuild --clear &lt;cmd&gt;</code> to cleanup manually.</p>"},{"location":"bndbuild/#display-management-echo-echo","title":"Display management: echo (echo)","text":"<pre><code>Print the arguments.\n\nUsage: echo [arguments]...\n\nArguments:\n  [arguments]...\n          Words to print\n</code></pre>"},{"location":"bndbuild/#external-program-management-extern","title":"External program management (extern)","text":"<pre><code>Launch an external command.\n\nUsage: extern &lt;program&gt; [arguments]...\n\nArguments:\n  &lt;program&gt;\n          The program to execute\n  [arguments]...\n          The arguments of the program\n</code></pre>"},{"location":"bndbuild/#image-management-benediction-transfer-tool-im2cpc","title":"Image management: Benediction transfer tool (im2cpc)","text":"<pre><code>Simple CPC image conversion tool\n\nUsage: CPC image conversion tool [OPTIONS] &lt;SOURCE&gt; [COMMAND]\n\nCommands:\n  sna     Generate a snapshot with the converted image.\n  dsk     Generate a DSK with an executable of the converted image.\n  scr     Generate an OCP SCR file\n  exec    Generate a binary file to manually copy in a DSK or M4 folder.\n  sprite  Generate a sprite file to be included inside an application\n  tile    Generate a list of sprites\n  m4      Directly send the code on the M4 through a snapshot\n  help    Print this message or the help of the given subcommand(s)\n\nArguments:\n  &lt;SOURCE&gt;\n          Filename to convert\n\nOptions:\n  -m, --mode &lt;MODE&gt;\n          Screen mode of the image to convert.\n\n          [default: 0]\n          [possible values: 0, 1, 2]\n\n      --fullscreen\n          Specify a full screen displayed using 2 non consecutive banks.\n\n      --overscan\n          Specify an overscan screen (crtc meaning).\n\n      --standard\n          Specify a standard screen manipulation.\n\n  -s, --skipoddpixels\n          Skip odd pixels when reading the image (usefull when the picture is mode 0 with duplicated pixels\n\n      --columnstart &lt;PIXEL_COLUMN_START&gt;\n          Number of pixel columns to skip on the left.\n\n      --columnskept &lt;PIXEL_COLUMNS_KEPT&gt;\n          Number of pixel columns to keep.\n\n      --linestart &lt;PIXEL_LINE_START&gt;\n          Number of pixel lines to skip.\n\n      --lineskept &lt;PIXEL_LINES_KEPT&gt;\n          Number of pixel lines to keep.\n\n      --pal &lt;OCP_PAL&gt;\n          OCP PAL file. The first palette among 12 is used\n\n      --pens &lt;PENS&gt;\n          Separated list of ink number. Use ',' as a separater\n\n      --pen0 &lt;PEN0&gt;\n          Ink number of the pen 0\n\n      --pen1 &lt;PEN1&gt;\n          Ink number of the pen 1\n\n      --pen2 &lt;PEN2&gt;\n          Ink number of the pen 2\n\n      --pen3 &lt;PEN3&gt;\n          Ink number of the pen 3\n\n      --pen4 &lt;PEN4&gt;\n          Ink number of the pen 4\n\n      --pen5 &lt;PEN5&gt;\n          Ink number of the pen 5\n\n      --pen6 &lt;PEN6&gt;\n          Ink number of the pen 6\n\n      --pen7 &lt;PEN7&gt;\n          Ink number of the pen 7\n\n      --pen8 &lt;PEN8&gt;\n          Ink number of the pen 8\n\n      --pen9 &lt;PEN9&gt;\n          Ink number of the pen 9\n\n      --pen10 &lt;PEN10&gt;\n          Ink number of the pen 10\n\n      --pen11 &lt;PEN11&gt;\n          Ink number of the pen 11\n\n      --pen12 &lt;PEN12&gt;\n          Ink number of the pen 12\n\n      --pen13 &lt;PEN13&gt;\n          Ink number of the pen 13\n\n      --pen14 &lt;PEN14&gt;\n          Ink number of the pen 14\n\n      --pen15 &lt;PEN15&gt;\n          Ink number of the pen 15\n\n  -h, --help\n\n\n  -V, --version\n          Print version\n</code></pre>"},{"location":"bndbuild/#image-management-impact-transfer-tool-martine","title":"Image management: Impact transfer tool (martine)","text":"<pre><code>Martine (0.39) [INFO] 2024/11/10 08:23:03 martine convert (jpeg, png format) image to Amstrad cpc screen (even overscan)\nMartine (0.39) [INFO] 2024/11/10 08:23:03 By Impact Sid (Version:0.39)\n  -address string\n        Starting address to display sprite in delta packing (default \"0xC000\")\nMartine (0.39) [INFO] 2024/11/10 08:23:03 Special thanks to @Ast (for his support), @Siko and @Tronic for ideas\nMartine (0.39) [INFO] 2024/11/10 08:23:03 usage :\n  -algo int\n\n        Algorithm to resize the image (available : \n                1: NearestNeighbor (default)\n                2: CatmullRom\n                3: Lanczos\n                4: Linear\n                5: Box\n                6: Hermite\n                7: BSpline\n                8: Hamming\n                9: Hann\n                10: Gaussian\n                11: Blackman\n                12: Bartlett\n                13: Welch\n                14: Cosine\n                15: MitchellNetravali\n                 (default 1)\n  -analyzetilemap string\n        analyse the image to get the most accurate tilemap according to the  criteria :\n                size : lower export size\n                number : lower number of tiles\n  -animate\n        Will produce an full screen with all sprite on the same image (add -in image.gif or -in *.png)\n  -autoexec\n        Execute on your remote CPC the screen file or basic file.\n  -brightness float\n        apply brightness on the color of the palette on amstrad plus screen. (max value 100 and only on CPC PLUS).\n  -compiled\n        Export sprite as compiled sprites.\n  -contrast float\n        apply contrast on the color of the palette on amstrad plus screen. (max value 100 and only on CPC PLUS).\n  -delta\n        Delta mode: compute delta between two files (prefixed by the argument -df)\n                (ex: -delta -df file1.SCR -df file2.SCR -df file3.SCR).\n                (ex with wildcard: -delta -df file\\?.SCR or -delta file\\*.SCR\n  -deltapacking\n        Will generate all the animation code from the followed gif file.\n  -deltapacking2\n        Will generate all the animation code from the followed gif file (and optimize export).\n  -df value\n        scr file path to add in delta mode comparison. (wildcard accepted such as ? or * file filename.) \n  -dithering int\n        Dithering algorithm to apply on input image\n        Algorithms available:\n                0: FloydSteinberg\n                1: JarvisJudiceNinke\n                2: Stucki\n                3: Atkinson\n                4: Sierra\n                5: SierraLite\n                6: Sierra3\n                7: Bayer2\n                8: Bayer3\n                9: Bayer4\n                10: Bayer8\n         (default -1)\n  -dsk\n        Copy files in a new CPC image Dsk.\n  -egx1\n        Create egx 1 output cpc image overscan (option -fullscreen) or classical (mix mode 0 / 1).\n                (ex before generate two images one in mode 1 et one in mode 0\n                for instance : martine -in myimage.jpg -mode 0 and martine -in myimage.jpg -mode 1\n                : -egx1 -in 1.SCR -mode 0 -pal 1.PAL -in2 2.SCR -out test -mode2 1 -dsk)\n                or\n                (ex automatic egx from image file : -egx1 -in input.png -mode 0 -out test -dsk)\n  -egx2\n        Create egx 2 output cpc image overscan (option -fullscreen) or classical (mix mode 1 / 2).\n                (ex before generate two images one in mode 1 et one in mode 2\n                for instance : martine -in myimage.jpg -mode 0 and martine -in myimage.jpg -mode 1\n                : -egx2 -in 1.SCR -mode 0 -pal 1.PAL -in2 2.SCR -out test -mode2 1 -dsk)\n                or\n                (ex automatic egx from image file : -egx2 -in input.png -mode 0 -out test -dsk)\n  -extendeddsk\n        Export in a Extended DSK 80 tracks, 10 sectors 400 ko per face\n  -fillout\n        Fill out the gif frames needed some case with deltapacking\n  -flash\n        generate flash animation with two ocp screens.\n                (ex: -mode 1 -flash -in input.png -out test -dsk)\n                or\n                (ex: -mode 1 -flash -i input1.scr -pal input1.pal -mode2 0 -iin2 input2.scr -pal2 input2.pal -out test -dsk )\n  -flat\n        Export sprite as flat file.\n  -fullscreen\n        Overscan mode (default no overscan)\n  -go\n        Export results as .go1 and .go2 files.\n  -height int\n        Custom output height in pixels. (Will produce a sprite file .win) (default -1)\n  -help\n        Display help message\n  -host string\n        Set the ip of your M4.\n  -imp\n        Will generate sprites as IMP-Catcher format (Impdraw V2).\n  -in string\n        Picture path of the input file.\n  -in2 string\n        Picture path of the second input file (flash mode)\n  -info\n        Return the information of the file, associated with -pal and -win options\n  -initprocess string\n        Create a new empty process file.\n  -ink string\n        Path of the palette Cpc ink file. (Apply the input ink palette on the image)\n  -inkswap string\n        Swap ink:\n                for instance mode 4 (4 inks) : 0=3,1=0,2=1,3=2\n                will swap in output image index 0 by 3 and 1 by 0 and so on.\n  -iter int\n        Iterations number to walk in roll mode, or number of images to generate in rotation mode. (default -1)\n  -iterx int\n        Number of tiles on a row in the input image. (default 1)\n  -itery int\n        Number of tiles on a column in the input image. (default 1)\n  -json\n        Generate json format output.\n  -keephigh int\n        Bit rotation on the top and keep pixels (default -1)\n  -keeplow int\n        Bit rotation on the bottom and keep pixels (default -1)\n  -kit string\n        Path of the palette Cpc plus Kit file. (Apply the input kit palette on the image)\n  -linewidth string\n        Line width in hexadecimal to compute the screen address in delta mode. (default \"#50\")\n  -losthigh int\n        Bit rotation on the top and lost pixels (default -1)\n  -lostlow int\n        Bit rotation on the bottom and lost pixels (default -1)\n  -mask string\n        Mask to apply on each bit of the sprite (to apply an and operation on each pixel with the value #AA [in hexdecimal: #AA or 0xAA, in decimal: 170] ex: martine -in myimage.png -width 40 -height 80 -mask #AA -mode 0 -maskand)\n  -maskand\n        Will apply an AND operation on each byte with the mask\n  -maskor\n        Will apply an OR operation on each byte with the mask\n  -mode int\n        Output mode to use :\n                0 for mode0\n                1 for mode1\n                2 for mode2\n                and add -fullscreen option for overscan export.\n                 (default -1)\n  -mode2 int\n        Output mode to use :\n                0 for mode0\n                1 for mode1\n                2 for mode2\n                mode of the second input file (flash mode) (default -1)\n  -multiplier float\n        Error dithering multiplier. (default 1.18)\n  -noheader\n        No amsdos header for all files (default amsdos header added).\n  -ocpwin\n        Export sprite as OCP win file.\n  -oneline\n        Display every other line.\n  -onerow\n        Display  every other row.\n  -out string\n        Output directory\nTODO / handle string collect instead of stdout output\n  -pal string\n\n        Apply the input palette to the image\n  -pal2 string\n        Apply the input palette to the second image (flash mode)\n  -plus\n        Plus mode (means generate an image for CPC Plus Screen)\n  -processfile string\n        Process file path to apply.\n  -quantization\n        Use additionnal quantization for dithering.\n  -reducer int\n        Reducer mask will reduce original image colors. Available : \n                1 : lower\n                2 : medium\n                3 : strong\n         (default -1)\n  -remotepath string\n        Remote path on your M4 where you want to copy your files.\n  -reverse\n        Transform .scr (overscan or not) file with palette (pal or kit file) into png file\n  -rla int\n        Bit rotation on the left and keep pixels (default -1)\n  -roll\n        Roll mode allow to walk and walk into the input file, associated with rla,rra,sra,sla, keephigh, keeplow, losthigh or lostlow options.\n  -rotate\n        Allow rotation on the input image, the input image must be a square (width equals height)\n  -rotate3d\n        Allow 3d rotation on the input image, the input image must be a square (width equals height)\n  -rotate3dtype int\n        Rotation type :\n                1 rotate on X axis\n                2 rotate on Y axis\n                3 rotate reverse X axis\n                4 rotate left to right on Y axis\n                5 diagonal rotation on X axis\n                6 diagonal rotation on Y axis\n\n  -rotate3dx0 int\n        X0 coordinate to apply in 3d rotation (default width of the image/2) (default -1)\n  -rotate3dy0 int\n        Y0 coordinate to apply in 3d rotation (default height of the image/2) (default -1)\n  -rra int\n        Bit rotation on the right and keep pixels (default -1)\n  -scanlinesequence string\n        Scanline sequence to apply on sprite. for instance : \n                martine -in myimage.jpg -width 4 -height 4 -scanlinesequence 0,2,1,3 \n                will generate a sprite stored with lines order 0 2 1 and 3.\n\n  -sla int\n        Bit rotation on the left and lost pixels (default -1)\n  -sna\n        Copy files in a new CPC image Sna.\n</code></pre>"},{"location":"bndbuild/#file-management-cp-cpcopy","title":"File management: cp (cp,copy)","text":"<pre><code>Copy files.\n\n\nUsage: cp [arguments]...\n\nArguments:\n  [arguments]...\n          Files to copy. Last one being the destination\n\nInner command of cpclib-bndbuild 0.6.0\n</code></pre>"},{"location":"bndbuild/#file-management-rm-rm-del","title":"File management: rm (rm, del)","text":"<pre><code>Delete files.\n\n\nUsage: rm [arguments]...\n\nArguments:\n  [arguments]...\n          Files to delete.\n\nInner command of cpclib-bndbuild 0.6.0\n</code></pre>"},{"location":"bndbuild/#amsdos-header-management-hideur","title":"Amsdos header management (hideur)","text":"<pre><code>Usage: hideur [OPTIONS] &lt;INPUT&gt;\n\nArguments:\n  &lt;INPUT&gt;\n          Input file to manipulate\n\nOptions:\n      --info\n\n\n  -o, --output &lt;OUTPUT&gt;\n          Output file to generate\n\n  -u, --user &lt;USER&gt;\n          User where to put the file\n\n  -t, --type &lt;TYPE&gt;\n          File type\n\n          [possible values: 0, 1, 2, Basic, Protected, Binary, basic, protected, binary, BASIC, PROTECTED, BINARY]\n\n  -x, --execution &lt;EXEC&gt;\n          Execution address. Default to the load address if not specified.\n\n  -l, --load &lt;LOAD&gt;\n          Loading address.\n</code></pre>"},{"location":"bndbuild/#disc-management-benediction-dsk-manager-dskdisc","title":"Disc management: Benediction dsk manager (dsk,disc)","text":"<pre><code>Manipulate DSK files\n\nUsage: dsk_manager &lt;DSK_FILE&gt; [COMMAND]\n\nCommands:\n  format   Format a dsk\n  catalog  Manipulate the catalog. Can only works for DSK having a Track 0 compatible with Amsdos\n  get      Retrieve files for the disc in the Amsdos way\n  add      Add files in the disc in an Amsdos way\n  put      Add files in the disc in a sectorial way\n  help     Print this message or the help of the given subcommand(s)\n\nArguments:\n  &lt;DSK_FILE&gt;\n          DSK file to manipulate\n\nOptions:\n  -h, --help\n\n\n  -V, --version\n          Print version\n\ncpclib-disc 0.8.2 embedded by cpclib-bndbuild 0.6.0\n</code></pre>"},{"location":"bndbuild/#disc-management-impact-dsk-manager-impdsk","title":"Disc management: Impact dsk manager (impdsk)","text":"<pre><code>Here sample usages :\n        * Create empty simple dsk file : dsk -dsk output.dsk -format\n        * Create empty simple dsk file with custom tracks and sectors: dsk -dsk output.dsk -format -sector 8 -track 42\n        * Create empty extended dsk file with custom head, tracks and sectors: dsk -dsk output.dsk -format -sector 8 -track 42 -dsktype 1 -head 2\n        * Create empty sna file : dsk -sna output.sna\n        * List dsk content : dsk -dsk output.dsk -list\n        * Get information on Sna file : dsk -sna output.sna -info\n        * Get information on file in dsk  : dsk -dsk output.dsk -amsdosfile hello.bin -info\n        * List file content in hexadecimal in dsk file : dsk -dsk output.dsk -amsdosfile hello.bin -hex\n        * Put file in dsk file : dsk -dsk output.dsk -put -amsdosfile hello.bin -exec #1000 -load 500\n        * Put file in sna file (here for a cpc plus): dsk -sna output.sna -put -amsdosfile hello.bin -exec #1000 -load 500 -screenmode 0 -cpctype 4\n\n\n  -addheader\n        Add header to the standalone file (must be set with exec, load and type options).\n  -amsdosfile string\n        File to handle in (or to insert in) the dsk.\n  -analyze\n        Returns the DSK header\n  -ascii\n        list the amsdosfile in ascii mode.\n  -autoextract string\n        Extract all DSK contained in the folder path\n  -autotest\n        Executs all tests.\n  -basic\n        List a basic amsdosfile.\n  -cpctype int\n        CPC type (sna import feature): \n                CPC464 : 0\n                CPC664: 1\n                CPC6128 : 2\n                Unknown : 3\n                CPCPlus6128 : 4\n                CPCPlus464 : 5\n                GX4000 : 6\n                 (default 2)\n  -data\n        Format in vendor format (sectors number #09, end track #27) (default true)\n  -desassemble\n        list the amsdosfile desassembled.\n  -dsk string\n        Dsk path to handle.\n  -dsktype int\n        DSK Type :\n                0 : DSK\n                1 : EDSK\n                3 : SNA\n\n  -exec string\n        Execute address of the inserted file. (hexadecimal #170 allowed.)\n  -force\n        Force overwriting of the inserted file.\n  -format\n        Format the followed dsk or sna.\n  -get\n        Get the file in the dsk.\n  -head int\n        Number of heads in the DSK (format) (default 1)\n  -help\n        display extended help.\n  -hex\n        List the amsdosfile in hexadecimal.\n  -info\n        Get informations of the amsdosfile (size, execute and loading address). Or get sna informations.\n  -list\n        List content of dsk.\n  -load string\n        Loading address of the inserted file. (hexadecimal #170 allowed.)\n  -put\n        Put the amsdosfile in the current dsk.\n  -quiet\n        remove useless display (for scripting for instance)\n  -rawexport\n        raw exports the amsdosfile, this option is associated with -dsk, -track and -sector.\n        This option will do a raw extract of the content beginning to track and sector values and will stop when size is reached.\n        for instance : dsk -dsk mydskfile.dsk -amsdosfile file.bin -rawexport -track 1 -sector 0 -size 16384\n  -rawimport\n        raw imports the amsdosfile, this option is associated with -dsk, -track and -sector.\n        This option will do a raw copy of the file starting to track and sector values.\n        for instance : dsk -dsk mydskfile.dsk -amsdosfile file.bin -rawimport -track 1 -sector 0\n  -remove\n        Remove the amsdosfile from the current dsk.\n  -screenmode int\n        screen mode parameter for the sna. (default 1)\n  -sector int\n        Sector number (format). (default 9)\n  -size int\n        Size to extract in rawexport, see rawexport for more details.\n  -sna string\n        SNA file to handle\n  -snaversion int\n        Set the sna version (1 or 2 available). (default 1)\n  -track int\n        Track number (format). (default 39)\n  -type string\n        Type of the inserted file \n                ascii : type ascii\n                protected : type ascii protected\n                binary : type binary\n\n  -user int\n        User number of the inserted file.\n  -vendor\n        Format in vendor format (sectors number #09, end track #27)\n  -version\n        Display the app's version and quit.\n</code></pre>"},{"location":"bndbuild/#assembler-basm-basm","title":"Assembler: BASM (basm)","text":"<pre><code>Benediction ASM -- z80 assembler that mainly targets Amstrad CPC\n\nUsage: basm [OPTIONS] [INPUT]\n\nArguments:\n  [INPUT]\n          Input file to read.\n\nOptions:\n      --inline &lt;INLINE&gt;\n          Z80 code is provided inline\n\n  -o, --output &lt;OUTPUT&gt;\n          Filename of the output.\n\n      --db\n          Write a db list on screen (usefull to get the value of an opcode)\n\n      --lst &lt;LISTING_OUTPUT&gt;\n          Filename of the listing output.\n\n      --remu &lt;REMU_OUTPUT&gt;\n          Filename to store the remu file used by Ace to import label and debug information\n\n      --wabp &lt;WABP_OUTPUT&gt;\n          Filename to stare the WABP file use to provide Winape breakpoints\n\n      --breakpoint-as-opcode\n          Breakpoints are stored as opcodes (mainly interesting for winape emulation)\n\n      --sym &lt;SYMBOLS_OUTPUT&gt;\n          Filename of the output symbols file.\n\n      --sym_kind &lt;SYMBOLS_KIND&gt;\n          Format of the output symbols file\n\n          [default: basm]\n          [possible values: winape, basm]\n\n      --basic\n          Request a Basic header (the very first instruction has to be the LOCOMOTIVE directive).\n\n      --binary\n          Request a binary header\n\n      --cartridge\n          Generate a CPR\n\n      --snapshot\n          Generate a snapshot\n\n      --nochunk &lt;CODE&gt;\n          Deactivate some snapshot chunks (comma separated)\n\n          [possible values: BRKC, BRKS, REMU, SYMB]\n\n  -i, --case-insensitive\n          Configure the assembler to be case insensitive.\n\n      --disable-warnings\n          Do not generate warnings\n\n  -d, --directives-prefixed-by-dot\n          Expect directives to by prefixed with a dot\n\n  -I, --include &lt;INCLUDE_DIRECTORIES&gt;\n          Provide additional directories used to search files\n\n  -D, --define &lt;DEFINE_SYMBOL&gt;\n          Provide a symbol with its value (default set to 1)\n\n      --no-forced-void\n          By default (void) is mandatory on macro without parameters. This option disable this behavior\n\n      --debug\n          Trace more information to help debug\n\n      --override\n          Override file when already stored in a disc\n\n      --backup\n          Backup an existing file when saved on disc\n\n      --orgams\n          Main source is at ORGAMS format\n\n      --m4 &lt;TO_M4&gt;\n          Provide the IP address of the M4\n\n  -l &lt;LOAD_SYMBOLS&gt;\n          Load symbols from the given file\n\n      --Werror\n          Warning are considered to be errors\n\n      --progress\n          Show a progress bar.\n\n      --list-embedded\n          List the embedded files\n\n      --view-embedded &lt;VIEW_EMBEDDED&gt;\n          Display one specific embedded file\n\n          [possible values: inner://crtc.asm, inner://deexo.asm, inner://deshrink.asm, inner://dzx0_fast.asm, inner://dzx0_standard.asm, inner://firmware/amsdos.asm, inner://firmware/casmng.asm, inner://firmware/gfxvdu.asm, inner://firmware/highkern.asm, inner://firmware/indirect.asm, inner://firmware/kernel.asm, inner://firmware/keymng.asm, inner://firmware/lowkern.asm, inner://firmware/machine.asm, inner://firmware/math6128.asm, inner://firmware/mathnot464.asm, inner://firmware/mathnot6xx.asm, inner://firmware/not464.asm, inner://firmware/scrpack.asm, inner://firmware/sound.asm, inner://firmware/txtvdu.asm, inner://ga.asm, inner://lz48decrunch.asm, inner://lz49decrunch.asm, inner://lz4_docent.asm, inner://opcodes_first_byte.asm, inner://pixels-routs.asm, inner://unaplib.asm, inner://unaplib_fast.asm]\n\n  -h, --help\n\n\n  -V, --version\n          Print version\n\ncpclib-basm 0.8.3 embedded by cpclib-bndbuild 0.6.0\n</code></pre>"},{"location":"bndbuild/#assembler-rasm-rasm","title":"Assembler: RASM (rasm)","text":"<pre><code>RASM v2.2.9 (build xx/10/2024) - Consolidation\n(c) 2017 Edouard BERGE (use -n option to display all licenses / -autotest for self-testing)\nLZ4 (c) Yann Collet / ZX0 &amp; ZX7 (c) Einar Saukas / Exomizer 2 (c) Magnus Lind / LZSA &amp; AP-Ultra (c) Emmanuel Marty\n\nSYNTAX: rasm &lt;inputfile&gt; [options]\n\nFILENAMES:\n-oa              automatic radix from input filename\n-o  &lt;radix&gt;      choose a common radix for all files\n-or &lt;filename&gt;   choose a radix filename for ROM output\n-ob &lt;filename&gt;   choose a full filename for binary output\n-oc &lt;filename&gt;   choose a full filename for cartridge output\n-ol &lt;filename&gt;   choose a full filename for ROM label output\n-oi &lt;filename&gt;   choose a full filename for snapshot output\n-os &lt;filename&gt;   choose a full filename for symbol output\n-ot &lt;filename&gt;   choose a full filename for tape output\n-ok &lt;filename&gt;   choose a full filename for breakpoint output\n-I&lt;path&gt;         set a path for files to read\n-no              disable all file output\nDEPENDENCIES EXPORT:\n-depend=make     output dependencies on a single line\n-depend=list     output dependencies as a list\nif 'binary filename' is set then it will be outputed first\nSYMBOLS EXPORT:\n-rasm            export super symbols file for ACE-DL\n-s               export symbols %s #%X B%d (label,adr,cprbank)\n-sz              export symbols with ZX emulator convention\n-sp              export symbols with Pasmo convention\n-sw              export symbols with Winape convention\n-ss              export symbols in the snapshot (SYMB chunk for ACE)\n-sc &lt;format&gt;     export symbols with source code convention\n-sm              export symbol in multiple files (one per bank)\n-ec              export labels with original case\n-er              export ROM labels\n-l  &lt;labelfile&gt;  import symbol file (winape,pasmo,rasm)\n-eb              export breakpoints\n-wu              warn for unused symbols (alias, var or label)\nSYMBOLS ADDITIONAL OPTIONS:\n-sl              export also local symbol\n-sv              export also variables symbol\n-sq              export also EQU symbol\n-sa              export all symbols (like -sl -sv -sq option)\n-Dvariable=value import value for variable\nCOMPATIBILITY:\n-m               Maxam style calculations\n-dams            Dams 'dot' label convention\n-ass             AS80  behaviour mimic\n-uz              UZ80  behaviour mimic\n-pasmo           PASMO behaviour mimic\n-amper           use ampersand for hex values\n-msep            &lt;separator&gt; set separator for modules\n-utf8            convert symbols from french or spanish keyboard inside quotes\n-fq              do not bother with special chars inside quotes\nMISCELLANEOUS:\n-quick           enable fast mode for ZX0 crunching\n-cprquiet        do not display ROM detailed informations\n-map             display information during early assembling stages\nEDSK generation/update:\n-eo              overwrite files on disk if it already exists\nSNAPSHOT:\n-sb              export breakpoints in snapshot (BRKS &amp; BRKC chunks)\n-ss              export symbols in the snapshot (SYMB chunk for ACE)\n-v2              export snapshot version 2 instead of version 3\nPARSING:\n-me &lt;value&gt;      set maximum number of error (0 means no limit)\n-twe             treat warnings as errors\n-xr              extended error display\n-w               disable warnings\n-void            force void usage with macro without parameter\n-mml             allow macro usage with parameters on multiple lines\n</code></pre>"},{"location":"bndbuild/#assembler-orgams-orgams","title":"Assembler: Orgams (orgams)","text":"<p>Orgams is a native assembler. So, an emulator is used to assemble source. WARNING: it currently does not work properly under windows.</p> <pre><code>Usage: orgams [OPTIONS] --from &lt;DATA_SOURCE&gt; --src &lt;SRC&gt;\n\nOptions:\n  -f, --from &lt;DATA_SOURCE&gt;\n          Data source (a folder for using albireo or a disc image)\n\n  -s, --src &lt;SRC&gt;\n          Filename to assemble or edit\n\n  -d, --dst &lt;DST&gt;\n          Filename to save after assembling. By default use the one provided by orgams\n\n  -b, --basm2orgams\n          Convert a Z80 source file into an ascii orgams file\n\n  -e, --edit\n          Launch the editor in an emulator\n\n  -j, --jump\n          Jump on the program instead of saving it\n</code></pre>"},{"location":"bndbuild/#assembler-sjasmplus-sjamsplus","title":"Assembler: Sjasmplus (sjamsplus)","text":"<pre><code>SjASMPlus Z80 Cross-Assembler v1.20.3 (https://github.com/z00m128/sjasmplus)\nBased on code of SjASM by Sjoerd Mastijn (http://www.xl2s.tk)\nCopyright 2004-2023 by Aprisobal and all other participants\n\nUsage:\nsjasmplus [options] sourcefile(s)\n\nOption flags as follows:\n  -h or --help[=warnings]  Help information (you see it)\n  --zxnext[=cspect]        Enable ZX Spectrum Next Z80 extensions (Z80N)\n  --i8080                  Limit valid instructions to i8080 only (+ no fakes)\n  --lr35902                Sharp LR35902 CPU instructions mode (+ no fakes)\n  --outprefix=&lt;path&gt;       Prefix for save/output/.. filenames in directives\n  -i&lt;path&gt; or -I&lt;path&gt; or --inc=&lt;path&gt; ( --inc without \"=\" to empty the list)\n                           Include path (later defined have higher priority)\n  --lst[=&lt;filename&gt;]       Save listing to &lt;filename&gt; (&lt;source&gt;.lst is default)\n  --lstlab[=sort]          Append [sorted] symbol table to listing\n  --sym=&lt;filename&gt;         Save symbol table to &lt;filename&gt;\n  --exp=&lt;filename&gt;         Save exports to &lt;filename&gt; (see EXPORT pseudo-op)\n  --raw=&lt;filename&gt;         Machine code saved also to &lt;filename&gt; (- is STDOUT)\n  --sld[=&lt;filename&gt;]       Save Source Level Debugging data to &lt;filename&gt;\n Note: use OUTPUT, LUA/ENDLUA and other pseudo-ops to control output\n Logging:\n  --nologo                 Do not show startup message\n  --msg=[all|war|err|none|lst|lstlab]\n                           Stderr messages verbosity (\"all\" is default)\n  --fullpath               Show full path to file in errors\n  --color=[on|off|auto]    Enable or disable ANSI coloring of warnings/errors\n Other:\n  -D&lt;NAME&gt;[=&lt;value&gt;] or --define &lt;NAME&gt;[=&lt;value&gt;]\n                           Define &lt;NAME&gt; as &lt;value&gt;\n  -                        Reads STDIN as source (even in between regular files)\n  --longptr                No device: program counter $ can go beyond 0x10000\n  --reversepop             Enable reverse POP order (as in base SjASM version)\n  --dirbol                 Enable directives from the beginning of line\n  --dos866                 Encode from Windows codepage to DOS 866 (Cyrillic)\n  --syntax=&lt;...&gt;           Adjust parsing syntax, check docs for details.\nFailure\nError while launching the command.\n</code></pre>"},{"location":"bndbuild/#assembler-vasm-z80-oldstyle-vasm","title":"Assembler: Vasm z80 oldstyle (vasm)","text":"<p>http://sun.hasenbraten.de/vasm/release/vasm_6.html</p>"},{"location":"bndbuild/#emulator-agnostic-emulation-cpcemu","title":"Emulator-agnostic emulation (cpc,emu)","text":"<pre><code>bndbuild --help cpc`\nUsage: cpclib-runner [OPTIONS] &lt;COMMAND&gt;\n\nCommands:\n  orgams  \n  run     \n  help    Print this message or the help of the given subcommand(s)\n\nOptions:\n  -a, --drivea &lt;DISCA&gt;\n          Disc A image\n\n  -b, --driveb &lt;DISCB&gt;\n          Disc B image\n\n      --albireo &lt;FOLDER&gt;\n          Albireo content (only for ACE) - WARNING. It is destructive as it completely replaces the existing content\n\n      --snapshot &lt;SNAPSHOT&gt;\n          Specify the snapshot to launch\n\n  -m, --memory &lt;MEMORY&gt;\n          [possible values: 64, 128, 192, 256, 320, 576, 1088, 2112]\n\n  -e, --emulator &lt;EMULATOR&gt;\n          [default: ace]\n          [possible values: ace, winape, cpcec, amspirit, sugarbox]\n\n  -k, --keepemulator\n          Keep the emulator open after the interaction\n\n  -c, --clear-cache\n          Clear the cache folder\n\n  -d, --debug &lt;DEBUG&gt;\n          rasm-compatible debug file (for ace ATM)\n\n  -r, --auto-run-file &lt;AUTO_RUN_FILE&gt;\n          The file to run\n\n      --disable-rom &lt;DISABLE_ROM&gt;\n          List the ROMS to deactivate\n\n          [possible values: orgams, unidos]\n</code></pre>"},{"location":"bndbuild/#emulator-amspirit-amspirit","title":"Emulator: AMSpiriT (amspirit)","text":"<pre><code>MSpiriT peut \u00eatre ex\u00e9cut\u00e9 par une ligne de commande, en mode console par exemple, permettant\nd\u2019automatiser certaines s\u00e9quences de d\u00e9marrage.\nDe nouvelles commandes seront progressivement ajout\u00e9es selon les besoins.\nCommandes disponibles :\nLes commandes en ligne sont standardis\u00e9es.\n--autorun Ex\u00e9cute automatiquement un enregistrement Cassette\n--crtc=X Fixe le type de CRTC au d\u00e9marrage (X = 0, 1, 1b, 2 ou 4)\n--file=file Charge un fichier dsk, ipf, hfe, cdt, wav, sna (le chemin doit \u00eatre complet)\n--csl=file Charge un fichier script \u00ab Cpc Scripting Language \u00bb (le chemin doit \u00eatre complet)\n--fullscreen Ex\u00e9cute AmspiriT en mode plein \u00e9cran\n--joystick Active le joystick (Mapping clavier)\n--keybPC Clavier en mode mapping PC =&gt; CPC\n--keybCPC Clavier en mode CPC (pas de mapping) \u2013 Disponible sur quelques claviers\n--nojoystick D\u00e9sactive le josystick\n--mute D\u00e9sactive le son\n--romX=file_rom Charge un fichier ROM dans un emplacement X (X varie entre 1 et 15)\nA noter que les ROMs charg\u00e9es ne seront pas m\u00e9moris\u00e9es par AmspiriT\n--run=Filename Lance un programme pr\u00e9sent sur une disquette ou une Rom.\n--config-file=rep Fixe le r\u00e9pertoire de AmspiriT o\u00f9 se situe le fichier de configuration\n</code></pre>"},{"location":"bndbuild/#emulator-cpcec-cpcec","title":"Emulator: CPCEC (cpcec)","text":"<p>(link broken ATM)</p>"},{"location":"bndbuild/#emulator-sugarboxv2-sugarbox","title":"Emulator: SugarboxV2 (sugarbox)","text":"<p>(pthread/glibc issue on linux ATM)</p>"},{"location":"bndbuild/#emulator-winape-winape","title":"Emulator: Winape (winape)","text":"<pre><code> When starting WinAPE a disc image filename can be specified as a parameter (without the slash option). The following parameters can be specified on the command line:\n\nParameter       Function\nfilename        Specify the filename for the disc image to be used in Drive A:\n/A      Automatically run the program in Drive A:. To specify the name of the program to run use /A:filename. To start a disc using a CP/M boot sector use /A:|CPM\n/T:filename     Automatically start typing from the given Auto-type file.\n/SN:filename    Specify a Snapshot file to be loaded and automatically started.\n/SYM:filename   Load a file containing assembler/debugger symbols.\n/SHUTDOWN       Shut down Windows when WinAPE is closed. Use /SHUTDOWN:FORCE to force shutdown if required.\n\nFor example, to start WinAPE using the disc image frogger.dsk contained within a Zip file frogger.zip and run the program named frogger use:\n\nWinAPE frogger.zip\\:frogger.dsk /a:frogger            \n</code></pre>"},{"location":"bndbuild/#transfer-m4-support-xfer","title":"Transfer: M4 support (xfer)","text":"<pre><code>RUST version of the communication tool between a PC and a CPC through the CPC Wifi card\n\nUsage: CPC xfer to M4 [CPCADDR] [COMMAND]\n\nCommands:\n  -r     Reboot M4.\n  -s     Reboot CPC.\n  -p     Upload the given file in the current folder or the provided one\n  -y     Upload a file on the M4 in the /tmp folder and launch it. V3 snapshots are automatically downgraded to V2 version\n  -x     Execute a file on the cpc (executable or snapshot)\n  --ls   Display contents of the M4\n  --pwd  Display the current working directory selected on the M4\n  --cd   Change of current directory in the M4.\n  help   Print this message or the help of the given subcommand(s)\n\nArguments:\n  [CPCADDR]\n          Specify the address of the M4. This argument is optional. If not set up, the content of the environment variable CPCIP is used.\n\nOptions:\n  -V, --version\n          Print version\n\n  -h, --help\n\n\ncpclib-xfertool 0.8.1 embedded by cpclib-bndbuild 0.6.0\n</code></pre>"},{"location":"bndbuild/recipes/","title":"Some recipes","text":""},{"location":"bndbuild/recipes/#ide-configuration-for-the-bndbuild-files","title":"IDE Configuration for the bnd.build files","text":"<p>The description of the build language is provided in the file <code>https://raw.githubusercontent.com/cpcsdk/rust.cpclib/refs/heads/master/cpclib-bndbuild/schema.json</code>. Provide it to your editor to validate the files.</p> <p>For examples the <code>yaml</code> settings of Visual Studio Code are:</p> <pre><code>    \"yaml.schemas\": {\n        \"https://raw.githubusercontent.com/cpcsdk/rust.cpclib/refs/heads/master/cpclib-bndbuild/schema.json\": [\"bnd.build\", \"build.bnd\", \"bndbuild.yaml\"]\n    },\n</code></pre>"},{"location":"bndbuild/recipes/#launch-of-embedded-commands","title":"Launch of embedded commands","text":"<p>These commands are not included in <code>bndbuild</code> source code and are downloaded, eventually compiled, installed in a cache folder of <code>bndbuild</code>. <code>bndbuild</code> can serve as a proxy to use them without manually installing them.</p>"},{"location":"bndbuild/recipes/#ace","title":"ACE","text":"<p><code>bndbuild --direct -- ace [ace arguments]</code></p>"},{"location":"bndbuild/recipes/#rasm","title":"rasm","text":"<p><code>bndbuild --direct -- rasm [rasm arguments]</code></p>"},{"location":"bndbuild/recipes/#update-of-commands","title":"Update of commands","text":"<p>Once embedded commands have been downloaded and installed, there is no need to reinstall them. Version number is hardcoded in <code>bndbuild</code> source code. However, some of them have not a clear version management form their authors. As a sideback, a new download can imply a new version. We provide then a dedicated command that. It can be usefull also in case of a former failed installation.</p>"},{"location":"bndbuild/recipes/#update-rasm","title":"Update rasm","text":"<p><code>bndbuild --update rasm</code></p>"},{"location":"bndbuild/recipes/#update-ace","title":"Update ACE","text":"<p><code>bndbuild --update ace</code></p>"},{"location":"bndbuild/recipes/#i-want-to-generate-a-graphical-representation-of-the-of-the-commands","title":"I want to generate a graphical representation of the of the commands","text":"<p><code>bndbuild --dot debug.png</code></p>"}]}