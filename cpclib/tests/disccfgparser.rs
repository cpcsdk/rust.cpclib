

extern crate cpclib;

#[cfg(test)]
#[macro_use] extern crate pretty_assertions;

#[cfg(test)]
mod tests {


const DOUBLE_SIDED: &str = 
"NbTrack = 80
NbSide = 2

[Track-A:0]
SectorSize = 512
Gap3 = 0x4e
SectorID = 0xc1,0xc6,0xc2,0xc7,0xc3,0xc8,0xc4,0xc9,0xc5
sectorIDHead = 0,0,0,0,0,0,0,0,0

[Track-A:1,11,21,31,41,51,61,71]
SectorSize = 512
Gap3 = 0x30
SectorID = 0xa1,0xa2,0xa3,0xa4,0xa5,0xa6,0xa7,0xa8,0xa9,0xaa
sectorIDHead = 0,0,0,0,0,0,0,0,0,0

[Track-A:2,12,22,32,42,52,62,72]
SectorSize = 512
Gap3 = 0x30
SectorID = 0xaa,0xa1,0xa2,0xa3,0xa4,0xa5,0xa6,0xa7,0xa8,0xa9
sectorIDHead = 0,0,0,0,0,0,0,0,0,0

[Track-A:3,13,23,33,43,53,63,73]
SectorSize = 512
Gap3 = 0x30
SectorID = 0xa9,0xaa,0xa1,0xa2,0xa3,0xa4,0xa5,0xa6,0xa7,0xa8
sectorIDHead = 0,0,0,0,0,0,0,0,0,0

[Track-A:4,14,24,34,44,54,64,74]
SectorSize = 512
Gap3 = 0x30
SectorID = 0xa8,0xa9,0xaa,0xa1,0xa2,0xa3,0xa4,0xa5,0xa6,0xa7
sectorIDHead = 0,0,0,0,0,0,0,0,0,0

[Track-A:5,15,25,35,45,55,65,75]
SectorSize = 512
Gap3 = 0x30
SectorID = 0xa7,0xa8,0xa9,0xaa,0xa1,0xa2,0xa3,0xa4,0xa5,0xa6
sectorIDHead = 0,0,0,0,0,0,0,0,0,0

[Track-A:6,16,26,36,46,56,66,76]
SectorSize = 512
Gap3 = 0x30
SectorID = 0xa6,0xa7,0xa8,0xa9,0xaa,0xa1,0xa2,0xa3,0xa4,0xa5
sectorIDHead = 0,0,0,0,0,0,0,0,0,0

[Track-A:7,17,27,37,47,57,67,77]
SectorSize = 512
Gap3 = 0x30
SectorID = 0xa5,0xa6,0xa7,0xa8,0xa9,0xaa,0xa1,0xa2,0xa3,0xa4
sectorIDHead = 0,0,0,0,0,0,0,0,0,0

[Track-A:8,18,28,38,48,58,68,78]
SectorSize = 512
Gap3 = 0x30
SectorID = 0xa4,0xa5,0xa6,0xa7,0xa8,0xa9,0xaa,0xa1,0xa2,0xa3
sectorIDHead = 0,0,0,0,0,0,0,0,0,0

[Track-A:9,19,29,39,49,59,69,79]
SectorSize = 512
Gap3 = 0x30
SectorID = 0xa3,0xa4,0xa5,0xa6,0xa7,0xa8,0xa9,0xaa,0xa1,0xa2
sectorIDHead = 0,0,0,0,0,0,0,0,0,0

[Track-A:10,20,30,40,50,60,70]
SectorSize = 512
Gap3 = 0x30
SectorID = 0xa2,0xa3,0xa4,0xa5,0xa6,0xa7,0xa8,0xa9,0xaa,0xa1
sectorIDHead = 0,0,0,0,0,0,0,0,0,0

[Track-B:0]
SectorSize = 512
Gap3 = 0x4e
SectorID = 0xc1,0xc6,0xc2,0xc7,0xc3,0xc8,0xc4,0xc9,0xc5
sectorIDHead = 0,0,0,0,0,0,0,0,0

[Track-B:1,11,21,31,41,51,61,71]
SectorSize = 512
Gap3 = 0x30
SectorID = 0xa1,0xa2,0xa3,0xa4,0xa5,0xa6,0xa7,0xa8,0xa9,0xaa
sectorIDHead = 1,1,1,1,1,1,1,1,1,1

[Track-B:2,12,22,32,42,52,62,72]
SectorSize = 512
Gap3 = 0x30
SectorID = 0xaa,0xa1,0xa2,0xa3,0xa4,0xa5,0xa6,0xa7,0xa8,0xa9
sectorIDHead = 1,1,1,1,1,1,1,1,1,1

[Track-B:3,13,23,33,43,53,63,73]
SectorSize = 512
Gap3 = 0x30
SectorID = 0xa9,0xaa,0xa1,0xa2,0xa3,0xa4,0xa5,0xa6,0xa7,0xa8
sectorIDHead = 1,1,1,1,1,1,1,1,1,1

[Track-B:4,14,24,34,44,54,64,74]
SectorSize = 512
Gap3 = 0x30
SectorID = 0xa8,0xa9,0xaa,0xa1,0xa2,0xa3,0xa4,0xa5,0xa6,0xa7
sectorIDHead = 1,1,1,1,1,1,1,1,1,1

[Track-B:5,15,25,35,45,55,65,75]
SectorSize = 512
Gap3 = 0x30
SectorID = 0xa7,0xa8,0xa9,0xaa,0xa1,0xa2,0xa3,0xa4,0xa5,0xa6
sectorIDHead = 1,1,1,1,1,1,1,1,1,1

[Track-B:6,16,26,36,46,56,66,76]
SectorSize = 512
Gap3 = 0x30
SectorID = 0xa6,0xa7,0xa8,0xa9,0xaa,0xa1,0xa2,0xa3,0xa4,0xa5
sectorIDHead = 1,1,1,1,1,1,1,1,1,1

[Track-B:7,17,27,37,47,57,67,77]
SectorSize = 512
Gap3 = 0x30
SectorID = 0xa5,0xa6,0xa7,0xa8,0xa9,0xaa,0xa1,0xa2,0xa3,0xa4
sectorIDHead = 1,1,1,1,1,1,1,1,1,1

[Track-B:8,18,28,38,48,58,68,78]
SectorSize = 512
Gap3 = 0x30
SectorID = 0xa4,0xa5,0xa6,0xa7,0xa8,0xa9,0xaa,0xa1,0xa2,0xa3
sectorIDHead = 1,1,1,1,1,1,1,1,1,1

[Track-B:9,19,29,39,49,59,69,79]
SectorSize = 512
Gap3 = 0x30
SectorID = 0xa3,0xa4,0xa5,0xa6,0xa7,0xa8,0xa9,0xaa,0xa1,0xa2
sectorIDHead = 1,1,1,1,1,1,1,1,1,1

[Track-B:10,20,30,40,50,60,70]
SectorSize = 512
Gap3 = 0x30
SectorID = 0xa2,0xa3,0xa4,0xa5,0xa6,0xa7,0xa8,0xa9,0xaa,0xa1
sectorIDHead = 1,1,1,1,1,1,1,1,1,1
";


const SINGLE_SIDED: &str = 
"
NbTrack = 42
NbSide = 1

[Track:0]
SectorSize = 512
Gap3 = 0x4e
SectorID = 0xc1,0xc6,0xc2,0xc7,0xc3,0xc8,0xc4,0xc9,0xc5
sectorIDHead = 0,0,0,0,0,0,0,0,0

[Track:1,11,21,31,41]
SectorSize = 512
Gap3 = 0x30
SectorID = 0xb1,0xb2,0xb3,0xb4,0xb5,0xb6,0xb7,0xb8,0xb9,0xba
sectorIDHead = 0,0,0,0,0,0,0,0,0,0

[Track:2,12,22,32]
SectorSize = 512
Gap3 = 0x30
SectorID = 0xba,0xb1,0xb2,0xb3,0xb4,0xb5,0xb6,0xb7,0xb8,0xb9
sectorIDHead = 0,0,0,0,0,0,0,0,0,0

[Track:3,13,23,33]
SectorSize = 512
Gap3 = 0x30
SectorID = 0xb9,0xba,0xb1,0xb2,0xb3,0xb4,0xb5,0xb6,0xb7,0xb8
sectorIDHead = 0,0,0,0,0,0,0,0,0,0

[Track:4,14,24,34]
SectorSize = 512
Gap3 = 0x30
SectorID = 0xb8,0xb9,0xba,0xb1,0xb2,0xb3,0xb4,0xb5,0xb6,0xb7
sectorIDHead = 0,0,0,0,0,0,0,0,0,0

[Track:5,15,25,35]
SectorSize = 512
Gap3 = 0x30
SectorID = 0xb7,0xb8,0xb9,0xba,0xb1,0xb2,0xb3,0xb4,0xb5,0xb6
sectorIDHead = 0,0,0,0,0,0,0,0,0,0

[Track:6,16,26,36]
SectorSize = 512
Gap3 = 0x30
SectorID = 0xb6,0xb7,0xb8,0xb9,0xba,0xb1,0xb2,0xb3,0xb4,0xb5
sectorIDHead = 0,0,0,0,0,0,0,0,0,0

[Track:7,17,27,37]
SectorSize = 512
Gap3 = 0x30
SectorID = 0xb5,0xb6,0xb7,0xb8,0xb9,0xba,0xb1,0xb2,0xb3,0xb4
sectorIDHead = 0,0,0,0,0,0,0,0,0,0

[Track:8,18,28,38]
SectorSize = 512
Gap3 = 0x30
SectorID = 0xb4,0xb5,0xb6,0xb7,0xb8,0xb9,0xba,0xb1,0xb2,0xb3
sectorIDHead = 0,0,0,0,0,0,0,0,0,0

[Track:9,19,29,39]
SectorSize = 512
Gap3 = 0x30
SectorID = 0xb3,0xb4,0xb5,0xb6,0xb7,0xb8,0xb9,0xba,0xb1,0xb2
sectorIDHead = 0,0,0,0,0,0,0,0,0,0

[Track:10,20,30,40]
SectorSize = 512
Gap3 = 0x30
SectorID = 0xb2,0xb3,0xb4,0xb5,0xb6,0xb7,0xb8,0xb9,0xba,0xb1
sectorIDHead = 0,0,0,0,0,0,0,0,0,0
";


#[test]
fn test_data() {
	// should not panic
	let _data_cfg = cpclib::disc::cfg::DiscConfig::single_side_data_format();
}

#[test]
fn parse_double_sided_cfg() {
	let parsed = cpclib::disc::cfg::parse_config(DOUBLE_SIDED.into());
	assert!(parsed.is_ok());
	match parsed {
		Ok( (next, res) ) => {

			assert!(next.len() == 0);
			assert_eq!(
				res.to_string().to_uppercase(),
				DOUBLE_SIDED.to_uppercase()
			);

			assert!(
				res.track_information_for_track(
					&cpclib::disc::edsk::Side::SideA, 
					0
				).is_some());
			assert!(
				res.track_information_for_track(
					&cpclib::disc::edsk::Side::SideA, 
					200
				).is_none());


			for idx in res.track_idx_iterator() {
				let _track = res.track_information_for_track(idx.0, idx.1)
							.expect(&format!("Unable to get information for {:?}", idx));
				println!("{:?}", idx);

			}
			let edsk = cpclib::disc::builder::build_disc_from_cfg(&res);
			let generated = edsk.to_cfg();

			// Verify if we have the same content of tracks ids
			assert_eq!(
				res.track_idx_iterator().collect::<Vec<_>>(),
				generated.track_idx_iterator().collect::<Vec<_>>()
			);

			assert_eq!(
				res.to_string().to_lowercase(), 
				generated.to_string().to_lowercase()
			);
		},
		_ => unreachable!()
	}

	
}


#[test]
fn parse_single_sided_cfg() {
	let parsed = cpclib::disc::cfg::parse_config(SINGLE_SIDED.into());
	println!("{:?}", &parsed);
	assert!(parsed.is_ok());
	match parsed {
		Ok( (next, _res) ) => {
			assert!(next.len() == 0);
		},
		_ => unreachable!()
	}
}
}